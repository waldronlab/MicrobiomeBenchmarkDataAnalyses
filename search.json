[{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 MicrobiomeBenchmarkDataAnalyses authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V13.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"HMP_2012_16S_gingival_V13 - subgingival vs supgragingival plaque","text":"Import dataset: Filter data Subjects run center first visit.","code":"dat_name <- 'HMP_2012_16S_gingival_V13' conditions_col <- 'body_subsite' conditions <- c(condB = 'subgingival_plaque', condA = 'supragingival_plaque')  tse <- getBenchmarkData(dat_name, dryrun = FALSE)[[1]] tse #> class: TreeSummarizedExperiment  #> dim: 33127 311  #> metadata(0): #> assays(1): counts #> rownames(33127): OTU_97.1 OTU_97.10 ... OTU_97.9997 OTU_97.9999 #> rowData names(7): superkingdom phylum ... genus taxon_annotation #> colnames(311): 700103497 700106940 ... 700111586 700109119 #> colData names(15): dataset subject_id ... sequencing_method #>   variable_region_16s #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> rowLinks: a LinkDataFrame (33127 rows) #> rowTree: 1 phylo tree(s) (33184 leaves) #> colLinks: NULL #> colTree: NULL col_data <- as.data.frame(colData(tse)) col_data_sub <-     dplyr::filter(col_data, run_center == 'WUGC', visit_number == 1) col_data_split <- split(col_data_sub, factor(col_data_sub$body_subsite)) subjects <- intersect(     col_data_split$subgingival_plaque$subject_id,     col_data_split$supragingival_plaque$subject_id )  male_subjects <- dplyr::filter(     col_data_sub,     subject_id %in% subjects, gender == 'male' ) %>%      dplyr::pull(subject_id) %>%      unique()  female_subjects <- dplyr::filter(     col_data_sub,     subject_id %in% subjects, gender == 'female' ) %>%      dplyr::pull(subject_id) %>%      unique() n <- min(length(male_subjects), length(female_subjects)) set.seed(1234) select_subjects <- c(sample(male_subjects, n), sample(female_subjects, n)) select_samples <- rownames(col_data_sub)[     col_data_sub$subject_id %in% select_subjects ] tse_subset <- tse[,select_samples] tse_subset <- filterTaxa(tse_subset) tse_subset #> class: TreeSummarizedExperiment  #> dim: 1233 96  #> metadata(0): #> assays(1): counts #> rownames(1233): OTU_97.10 OTU_97.1000 ... OTU_97.9900 OTU_97.995 #> rowData names(7): superkingdom phylum ... genus taxon_annotation #> colnames(96): 700103497 700106940 ... 700024964 700103572 #> colData names(15): dataset subject_id ... sequencing_method #>   variable_region_16s #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> rowLinks: a LinkDataFrame (1233 rows) #> rowTree: 1 phylo tree(s) (33184 leaves) #> colLinks: NULL #> colTree: NULL"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V13.html","id":"prior-information","dir":"Articles","previous_headings":"","what":"Prior information","title":"HMP_2012_16S_gingival_V13 - subgingival vs supgragingival plaque","text":"OTU level: Convert phyloseq","code":"row_data <- as.data.frame(rowData(tse_subset)) prior_info <- row_data[, c('genus', 'taxon_annotation')] prior_info$taxon_name <- rownames(row_data) prior_info$new_names <- paste0(prior_info$taxon_name, '|', prior_info$genus) prior_info <-      dplyr::relocate(prior_info, taxon_name, new_names, genus, taxon_annotation) head(prior_info) #>                taxon_name                new_names       genus #> OTU_97.10       OTU_97.10    OTU_97.10|Veillonella Veillonella #> OTU_97.1000   OTU_97.1000           OTU_97.1000|NA        <NA> #> OTU_97.10025 OTU_97.10025 OTU_97.10025|Actinomyces Actinomyces #> OTU_97.10028 OTU_97.10028      OTU_97.10028|Rothia      Rothia #> OTU_97.101     OTU_97.101        OTU_97.101|Rothia      Rothia #> OTU_97.10165 OTU_97.10165 OTU_97.10165|Abiotrophia Abiotrophia #>                   taxon_annotation #> OTU_97.10                anaerobic #> OTU_97.1000                   <NA> #> OTU_97.10025             anaerobic #> OTU_97.10028 facultative_anaerobic #> OTU_97.101   facultative_anaerobic #> OTU_97.10165 facultative_anaerobic ps <- makePhyloseqFromTreeSummarizedExperiment(tse_subset) sample_data(ps)[[conditions_col]] <-      factor(sample_data(ps)[[conditions_col]], levels = conditions) ps #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 1233 taxa and 96 samples ] #> sample_data() Sample Data:       [ 96 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 1233 taxa by 5 taxonomic ranks ] #> phy_tree()    Phylogenetic Tree: [ 1233 tips and 1004 internal nodes ]"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V13.html","id":"differential-abundance-analysis","dir":"Articles","previous_headings":"Prior information","what":"Differential abundance analysis","title":"HMP_2012_16S_gingival_V13 - subgingival vs supgragingival plaque","text":"","code":"time_start <- Sys.time() DA_output <- run_DA(ps, conditions_col, conditions) time_end <- Sys.time() time_elapsed <- time_end - time_start time_elapsed #> Time difference of 5.262112 mins"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V13.html","id":"enrichment-analysis","dir":"Articles","previous_headings":"Prior information","what":"Enrichment analysis","title":"HMP_2012_16S_gingival_V13 - subgingival vs supgragingival plaque","text":"Get direction","code":"direction <- get_direction_cols(DA_output, conditions_col, conditions)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V13.html","id":"enrichment-adjp-0-1","dir":"Articles","previous_headings":"Prior information","what":"Enrichment (adjP <= 0.1)","title":"HMP_2012_16S_gingival_V13 - subgingival vs supgragingival plaque","text":"","code":"enrichment <- createEnrichment(     object = DA_output,     priorKnowledge = prior_info,     enrichmentCol = \"taxon_annotation\",     namesCol = \"new_names\",     slot = \"pValMat\", colName = \"adjP\", type = \"pvalue\",     direction = direction,     threshold_pvalue = 0.1,     threshold_logfc = 0,     top = NULL, # No top feature selected     alternative = \"greater\",     verbose = FALSE  )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V13.html","id":"plot-enrichment","dir":"Articles","previous_headings":"Prior information","what":"Plot enrichment","title":"HMP_2012_16S_gingival_V13 - subgingival vs supgragingival plaque","text":"","code":"enrich_plot <- plot_enrichment(     enrichment = enrichment,      enrichment_col = \"taxon_annotation\",     levels_to_plot = c(\"aerobic\", \"anaerobic\", \"facultative_anaerobic\"),     conditions = conditions ) enrich_plot <- enrich_plot +     labs(y = 'Number of OTUs') enrich_plot"},{"path":[]},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V13.html","id":"calculate-tp---fp-ratio-no-threshold","dir":"Articles","previous_headings":"Putative true positives - putative false positives","what":"Calculate TP - FP ratio (no threshold)","title":"HMP_2012_16S_gingival_V13 - subgingival vs supgragingival plaque","text":"","code":"positives <- createPositives(     object = DA_output,      priorKnowledge = prior_info,      enrichmentCol = \"taxon_annotation\", namesCol = \"new_names\",     slot = \"pValMat\", colName = \"adjP\", type = \"pvalue\",     direction = direction,     threshold_pvalue = 1,     threshold_logfc = 0,     top = seq.int(from = 0, to = 50, by = 5),     alternative = \"greater\",     verbose = FALSE,     TP = list(c(\"DOWN Abundant\", \"anaerobic\"), c(\"UP Abundant\", \"aerobic\")),     FP = list(c(\"DOWN Abundant\", \"aerobic\"), c(\"UP Abundant\", \"anaerobic\")) ) |>      left_join(get_meth_class(), by = 'method')"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V13.html","id":"plot-tp---fp","dir":"Articles","previous_headings":"Putative true positives - putative false positives","what":"Plot TP - FP","title":"HMP_2012_16S_gingival_V13 - subgingival vs supgragingival plaque","text":"","code":"positive_plots <- plot_positives(positives) grid.arrange(grobs = positive_plots, ncol = 3)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V13.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"HMP_2012_16S_gingival_V13 - subgingival vs supgragingival plaque","text":"","code":"sessionInfo() #> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] gridExtra_2.3                              #>  [2] ggplot2_3.3.6                              #>  [3] dplyr_1.0.9                                #>  [4] benchdamic_1.3.1                           #>  [5] magrittr_2.0.3                             #>  [6] phyloseq_1.40.0                            #>  [7] mia_1.4.0                                  #>  [8] MultiAssayExperiment_1.22.0                #>  [9] MicrobiomeBenchmarkData_0.99.0             #> [10] TreeSummarizedExperiment_2.4.0             #> [11] Biostrings_2.64.0                          #> [12] XVector_0.36.0                             #> [13] SingleCellExperiment_1.18.0                #> [14] SummarizedExperiment_1.26.1                #> [15] Biobase_2.56.0                             #> [16] GenomicRanges_1.48.0                       #> [17] GenomeInfoDb_1.32.3                        #> [18] IRanges_2.30.0                             #> [19] S4Vectors_0.34.0                           #> [20] BiocGenerics_0.42.0                        #> [21] MatrixGenerics_1.8.1                       #> [22] matrixStats_0.62.0                         #> [23] MicrobiomeBenchmarkDataAnalyses_0.0.0.9000 #>  #> loaded via a namespace (and not attached): #>   [1] softImpute_1.4-1            pbapply_1.5-0               #>   [3] lattice_0.20-45             vctrs_0.4.1                 #>   [5] expm_0.999-6                mgcv_1.8-40                 #>   [7] beanplot_1.3.1              blob_1.2.3                  #>   [9] survival_3.4-0              nloptr_2.0.3                #>  [11] spatstat.data_2.2-0         later_1.3.0                 #>  [13] DBI_1.1.3                   rappdirs_0.3.3              #>  [15] uwot_0.1.11                 jpeg_0.1-9                  #>  [17] zlibbioc_1.42.0             MatrixModels_0.5-0          #>  [19] rgeos_0.5-9                 htmlwidgets_1.5.4           #>  [21] mvtnorm_1.1-3               future_1.27.0               #>  [23] leiden_0.4.2                ANCOMBC_1.6.2               #>  [25] parallel_4.2.1              scater_1.24.0               #>  [27] irlba_2.3.5                 illuminaio_0.38.0           #>  [29] Rcpp_1.0.9                  readr_2.1.2                 #>  [31] KernSmooth_2.23-20          promises_1.2.0.1            #>  [33] DelayedArray_0.22.0         methylumi_2.42.0            #>  [35] limma_3.52.2                vegan_2.6-2                 #>  [37] Hmisc_4.7-1                 fs_1.5.2                    #>  [39] textshaping_0.3.6           digest_0.6.29               #>  [41] png_0.1-7                   nor1mix_1.3-0               #>  [43] sctransform_0.3.3           cowplot_1.1.1               #>  [45] nleqslv_3.3.3               glmnet_4.1-4                #>  [47] pkgconfig_2.0.3             spatstat.random_2.2-0       #>  [49] DelayedMatrixStats_1.18.0   ggbeeswarm_0.6.0            #>  [51] iterators_1.0.14            reticulate_1.25             #>  [53] ffpe_1.40.0                 beeswarm_0.4.0              #>  [55] modeltools_0.2-23           xfun_0.32                   #>  [57] bslib_0.4.0                 zoo_1.8-10                  #>  [59] tidyselect_1.1.2            reshape2_1.4.4              #>  [61] purrr_0.3.4                 ica_1.0-3                   #>  [63] viridisLite_0.4.0           rtracklayer_1.56.1          #>  [65] rlang_1.0.4                 jquerylib_0.1.4             #>  [67] glue_1.6.2                  RColorBrewer_1.1-3          #>  [69] RcppZiggurat_0.1.6          registry_0.5-1              #>  [71] stringr_1.4.0               DESeq2_1.36.0               #>  [73] labeling_0.4.2              SparseM_1.81                #>  [75] httpuv_1.6.5                biomformat_1.24.0           #>  [77] class_7.3-20                preprocessCore_1.58.0       #>  [79] BiocNeighbors_1.14.0        TH.data_1.1-1               #>  [81] Wrench_1.14.0               annotate_1.74.0             #>  [83] jsonlite_1.8.0              bit_4.0.4                   #>  [85] mime_0.12                   systemfonts_1.0.4           #>  [87] gplots_3.1.3                Rsamtools_2.12.0            #>  [89] Exact_3.1                   zCompositions_1.4.0-1       #>  [91] stringi_1.7.8               ROI_1.0-0                   #>  [93] spatstat.sparse_2.1-1       gsl_2.1-7.1                 #>  [95] rbibutils_2.2.9             scattermore_0.8             #>  [97] Rdpack_2.4                  yulab.utils_0.0.5           #>  [99] quadprog_1.5-8              bitops_1.0-7                #> [101] cli_3.3.0                   rhdf5filters_1.8.0          #> [103] ALDEx2_1.28.1               RSQLite_2.2.15              #> [105] tidyr_1.2.0                 libcoin_1.0-9               #> [107] data.table_1.14.2           bumphunter_1.38.0           #> [109] energy_1.7-10               rstudioapi_0.13             #> [111] microbiome_1.18.0           GenomicAlignments_1.32.1    #> [113] sfsmisc_1.1-13              nlme_3.1-159                #> [115] locfit_1.5-9.6              listenv_0.8.0               #> [117] DECIPHER_2.24.0             miniUI_0.1.1.1              #> [119] NADA_1.6-1.1                dbplyr_2.2.1                #> [121] readxl_1.4.0                TTR_0.24.3                  #> [123] lifecycle_1.0.1             cellranger_1.1.0            #> [125] munsell_0.5.0               caTools_1.18.2              #> [127] codetools_0.2-18            vipor_0.4.5                 #> [129] lmtest_0.9-40               htmlTable_2.4.1             #> [131] xtable_1.8-4                ROCR_1.0-11                 #> [133] BiocManager_1.30.18         abind_1.4-5                 #> [135] farver_2.1.1                parallelly_1.32.1           #> [137] RANN_2.6.1                  askpass_1.1                 #> [139] SeuratObject_4.1.0          BiocIO_1.6.0                #> [141] GEOquery_2.64.2             RcppAnnoy_0.0.19            #> [143] goftest_1.2-3               patchwork_1.1.1             #> [145] tibble_3.1.8                ggdendro_0.1.23             #> [147] cluster_2.1.3               future.apply_1.9.0          #> [149] Seurat_4.1.1                Matrix_1.4-1                #> [151] tidytree_0.4.0              ellipsis_0.3.2              #> [153] prettyunits_1.1.1           metagenomeSeq_1.38.0        #> [155] ggridges_0.5.3              mclust_5.4.10               #> [157] igraph_1.3.4                multtest_2.52.0             #> [159] minfi_1.42.0                slam_0.1-50                 #> [161] spatstat.utils_2.3-1        htmltools_0.5.3             #> [163] BiocFileCache_2.4.0         yaml_2.3.5                  #> [165] GenomicFeatures_1.48.3      utf8_1.2.2                  #> [167] plotly_4.10.0               XML_3.99-0.10               #> [169] pkgdown_2.0.6               e1071_1.7-11                #> [171] foreign_0.8-82              withr_2.5.0                 #> [173] scuttle_1.6.2               fitdistrplus_1.1-8          #> [175] BiocParallel_1.30.3         bit64_4.0.5                 #> [177] rngtools_1.5.2              doRNG_1.8.2                 #> [179] rootSolve_1.8.2.3           trust_0.1-8                 #> [181] affyio_1.66.0               multcomp_1.4-20             #> [183] foreach_1.5.2               spatstat.core_2.4-4         #> [185] progressr_0.10.1            ragg_1.2.2                  #> [187] rsvd_1.0.5                  ScaledMatrix_1.4.0          #> [189] memoise_2.0.1               evaluate_0.16               #> [191] VGAM_1.1-7                  forcats_0.5.1               #> [193] geneplotter_1.74.0          tzdb_0.3.0                  #> [195] permute_0.9-7               lmom_2.9                    #> [197] curl_4.3.2                  fansi_1.0.3                 #> [199] highr_0.9                   xts_0.12.1                  #> [201] ZINQ_1.0                    tensor_1.5                  #> [203] edgeR_3.38.4                checkmate_2.1.0             #> [205] cachem_1.0.6                desc_1.4.1                  #> [207] truncnorm_1.0-8             interp_1.1-3                #> [209] detectseparation_0.2        deldir_1.0-6                #> [211] corncob_0.2.0               rjson_0.2.21                #> [213] ggrepel_0.9.1               lumi_2.48.0                 #> [215] ade4_1.7-19                 rprojroot_2.0.3             #> [217] tools_4.2.1                 sass_0.4.2                  #> [219] sandwich_3.0-2              RCurl_1.98-1.8              #> [221] proxy_0.4-27                ape_5.6-2                   #> [223] xml2_1.3.3                  ROI.plugin.lpsolve_1.0-1    #> [225] httr_1.4.3                  assertthat_0.2.1            #> [227] rmarkdown_2.14              boot_1.3-28                 #> [229] globals_0.16.0              R6_2.5.1                    #> [231] Rhdf5lib_1.18.2             nnet_7.3-17                 #> [233] DirichletMultinomial_1.38.0 progress_1.2.2              #> [235] genefilter_1.78.0           KEGGREST_1.36.3             #> [237] treeio_1.20.1               gtools_3.9.3                #> [239] shape_1.4.6                 coin_1.4-2                  #> [241] beachmat_2.12.0             HDF5Array_1.24.2            #> [243] BiocSingular_1.12.0         rhdf5_2.40.0                #> [245] splines_4.2.1               colorspace_2.0-3            #> [247] generics_0.1.3              base64enc_0.1-3             #> [249] pillar_1.8.0                affy_1.74.0                 #> [251] sp_1.5-0                    GenomeInfoDbData_1.2.8      #> [253] plyr_1.8.7                  gtable_0.3.0                #> [255] restfulr_0.0.15             lpSolveAPI_5.5.2.0-17.8     #> [257] latticeExtra_0.6-30         knitr_1.39                  #> [259] biomaRt_2.52.0              fastmap_1.1.0               #> [261] doParallel_1.0.17           quantreg_5.94               #> [263] AnnotationDbi_1.58.0        Rfast_2.0.6                 #> [265] backports_1.4.1             openssl_2.0.2               #> [267] scales_1.2.0                filelock_1.0.2              #> [269] base64_2.0                  decontam_1.16.0             #> [271] gld_2.6.5                   hms_1.1.1                   #> [273] scrime_1.3.5                Rtsne_0.16                  #> [275] shiny_1.7.2                 MGLM_0.2.1                  #> [277] polyclip_1.10-0             grid_4.2.1                  #> [279] numDeriv_2016.8-1.1         siggenes_1.70.0             #> [281] DescTools_0.99.45           lazyeval_0.2.2              #> [283] Formula_1.2-4               crayon_1.5.1                #> [285] MASS_7.3-58.1               MAST_1.22.0                 #> [287] sparseMatrixStats_1.8.0     viridis_0.6.2               #> [289] reshape_0.8.9               rpart_4.1.16                #> [291] compiler_4.2.1              spatstat.geom_2.4-0         #> [293] zinbwave_1.18.0"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"HMP_2012_16S_gingival_V35 - supgragingival vs sugingival plaque","text":"Import dataset: Filter data Subjects run center first visit.","code":"dat_name <- 'HMP_2012_16S_gingival_V35' conditions_col <- 'body_subsite' conditions <- c(condB = 'subgingival_plaque', condA = 'supragingival_plaque')  tse <- getBenchmarkData(dat_name, dryrun = FALSE)[[1]] tse #> class: TreeSummarizedExperiment  #> dim: 17949 311  #> metadata(0): #> assays(1): counts #> rownames(17949): OTU_97.1 OTU_97.10 ... OTU_97.9991 OTU_97.9995 #> rowData names(7): superkingdom phylum ... genus taxon_annotation #> colnames(311): 700103497 700106940 ... 700111586 700109119 #> colData names(15): dataset subject_id ... sequencing_method #>   variable_region_16s #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> rowLinks: a LinkDataFrame (17949 rows) #> rowTree: 1 phylo tree(s) (45364 leaves) #> colLinks: NULL #> colTree: NULL col_data <- as.data.frame(colData(tse)) col_data_sub <-     dplyr::filter(col_data, run_center == 'WUGC', visit_number == 1) col_data_split <- split(col_data_sub, factor(col_data_sub$body_subsite)) subjects <- intersect(     col_data_split$subgingival_plaque$subject_id,     col_data_split$supragingival_plaque$subject_id )  male_subjects <- dplyr::filter(     col_data_sub,     subject_id %in% subjects, gender == 'male' ) %>%      dplyr::pull(subject_id) %>%      unique()  female_subjects <- dplyr::filter(     col_data_sub,     subject_id %in% subjects, gender == 'female' ) %>%      dplyr::pull(subject_id) %>%      unique() n <- min(length(male_subjects), length(female_subjects)) set.seed(1234) select_subjects <- c(sample(male_subjects, n), sample(female_subjects, n)) select_samples <- rownames(col_data_sub)[     col_data_sub$subject_id %in% select_subjects ] tse_subset <- tse[,select_samples] tse_subset <- filterTaxa(tse_subset)  colData(tse_subset)[[conditions_col]] <-      factor(colData(tse_subset)[[conditions_col]], levels = conditions)  tse_subset #> class: TreeSummarizedExperiment  #> dim: 1487 96  #> metadata(0): #> assays(1): counts #> rownames(1487): OTU_97.10005 OTU_97.10006 ... OTU_97.9966 OTU_97.9991 #> rowData names(7): superkingdom phylum ... genus taxon_annotation #> colnames(96): 700103497 700106940 ... 700024964 700103572 #> colData names(15): dataset subject_id ... sequencing_method #>   variable_region_16s #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> rowLinks: a LinkDataFrame (1487 rows) #> rowTree: 1 phylo tree(s) (45364 leaves) #> colLinks: NULL #> colTree: NULL"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35.html","id":"prior-information","dir":"Articles","previous_headings":"","what":"Prior information","title":"HMP_2012_16S_gingival_V35 - supgragingival vs sugingival plaque","text":"OTU level:","code":"row_data <- as.data.frame(rowData(tse_subset)) prior_info <- row_data[, c('genus', 'taxon_annotation')] prior_info$taxon_name <- rownames(row_data) prior_info$new_names <- paste0(prior_info$taxon_name, '|', prior_info$genus) prior_info <-      dplyr::relocate(prior_info, taxon_name, new_names, genus, taxon_annotation) head(prior_info) #>                taxon_name                   new_names          genus #> OTU_97.10005 OTU_97.10005 OTU_97.10005|Capnocytophaga Capnocytophaga #> OTU_97.10006 OTU_97.10006    OTU_97.10006|Actinomyces    Actinomyces #> OTU_97.10081 OTU_97.10081             OTU_97.10081|NA           <NA> #> OTU_97.10128 OTU_97.10128    OTU_97.10128|Actinomyces    Actinomyces #> OTU_97.10155 OTU_97.10155    OTU_97.10155|Actinomyces    Actinomyces #> OTU_97.10169 OTU_97.10169     OTU_97.10169|Prevotella     Prevotella #>                   taxon_annotation #> OTU_97.10005 facultative_anaerobic #> OTU_97.10006             anaerobic #> OTU_97.10081                  <NA> #> OTU_97.10128             anaerobic #> OTU_97.10155             anaerobic #> OTU_97.10169             anaerobic"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35.html","id":"benchmarking-at-the-otu-level","dir":"Articles","previous_headings":"","what":"Benchmarking at the OTU level","title":"HMP_2012_16S_gingival_V35 - supgragingival vs sugingival plaque","text":"Convert phyloseq","code":"ps <- makePhyloseqFromTreeSummarizedExperiment(tse_subset) sample_data(ps)[[conditions_col]] <-      factor(sample_data(ps)[[conditions_col]], levels = conditions) ps #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 1487 taxa and 96 samples ] #> sample_data() Sample Data:       [ 96 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 1487 taxa by 5 taxonomic ranks ] #> phy_tree()    Phylogenetic Tree: [ 1487 tips and 1470 internal nodes ]"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35.html","id":"differential-abundance-analysis","dir":"Articles","previous_headings":"Benchmarking at the OTU level","what":"Differential abundance analysis","title":"HMP_2012_16S_gingival_V35 - supgragingival vs sugingival plaque","text":"","code":"time_start <- Sys.time() DA_output <- run_DA(ps, conditions_col, conditions) time_end <- Sys.time() elapsed_time <- time_end - time_start elapsed_time #> Time difference of 6.808888 mins"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35.html","id":"enrichment-analysis","dir":"Articles","previous_headings":"","what":"Enrichment analysis","title":"HMP_2012_16S_gingival_V35 - supgragingival vs sugingival plaque","text":"Get direction","code":"direction <- get_direction_cols(DA_output, conditions_col, conditions)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35.html","id":"enrichment-fdr-0-1","dir":"Articles","previous_headings":"Enrichment analysis","what":"Enrichment (FDR <= 0.1)","title":"HMP_2012_16S_gingival_V35 - supgragingival vs sugingival plaque","text":"","code":"enrichment <- createEnrichment(     object = DA_output,     priorKnowledge = prior_info,     enrichmentCol = \"taxon_annotation\",     namesCol = \"new_names\",     slot = \"pValMat\", colName = \"adjP\", type = \"pvalue\",     direction = direction,     threshold_pvalue = 0.1,     threshold_logfc = 0,     top = NULL, # No top feature selected     alternative = \"greater\",     verbose = FALSE  )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35.html","id":"plot-enrichment","dir":"Articles","previous_headings":"Enrichment analysis","what":"Plot enrichment","title":"HMP_2012_16S_gingival_V35 - supgragingival vs sugingival plaque","text":"","code":"enrich_plot <- plot_enrichment(     enrichment = enrichment,      enrichment_col = \"taxon_annotation\",     levels_to_plot = c(\"aerobic\", \"anaerobic\", \"facultative_anaerobic\"),     conditions = conditions ) enrich_plot +     labs(y = \"Number of OTUs\")"},{"path":[]},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35.html","id":"calculate-tp---fp-ratio-no-threshold","dir":"Articles","previous_headings":"Putative true positives - putative false positives","what":"Calculate TP - FP ratio (no threshold)","title":"HMP_2012_16S_gingival_V35 - supgragingival vs sugingival plaque","text":"","code":"positives <- createPositives(     object = DA_output,      priorKnowledge = prior_info,      enrichmentCol = \"taxon_annotation\", namesCol = \"new_names\",     slot = \"pValMat\", colName = \"adjP\", type = \"pvalue\",     direction = direction,     threshold_pvalue = 1,     threshold_logfc = 0,     top = seq.int(from = 0, to = 50, by = 5),     alternative = \"greater\",     verbose = FALSE,     TP = list(c(\"DOWN Abundant\", \"anaerobic\"), c(\"UP Abundant\", \"aerobic\")),     FP = list(c(\"DOWN Abundant\", \"aerobic\"), c(\"UP Abundant\", \"anaerobic\")) ) |>      left_join(get_meth_class(), by = 'method')"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35.html","id":"plot-tp---fp","dir":"Articles","previous_headings":"Putative true positives - putative false positives","what":"Plot TP - FP","title":"HMP_2012_16S_gingival_V35 - supgragingival vs sugingival plaque","text":"","code":"positive_plots <- plot_positives(positives) grid.arrange(grobs = positive_plots, ncol = 3)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"HMP_2012_16S_gingival_V35 - supgragingival vs sugingival plaque","text":"","code":"sessionInfo() #> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] gridExtra_2.3                              #>  [2] ggplot2_3.3.6                              #>  [3] dplyr_1.0.9                                #>  [4] benchdamic_1.3.1                           #>  [5] magrittr_2.0.3                             #>  [6] phyloseq_1.40.0                            #>  [7] mia_1.4.0                                  #>  [8] MultiAssayExperiment_1.22.0                #>  [9] MicrobiomeBenchmarkData_0.99.0             #> [10] TreeSummarizedExperiment_2.4.0             #> [11] Biostrings_2.64.0                          #> [12] XVector_0.36.0                             #> [13] SingleCellExperiment_1.18.0                #> [14] SummarizedExperiment_1.26.1                #> [15] Biobase_2.56.0                             #> [16] GenomicRanges_1.48.0                       #> [17] GenomeInfoDb_1.32.3                        #> [18] IRanges_2.30.0                             #> [19] S4Vectors_0.34.0                           #> [20] BiocGenerics_0.42.0                        #> [21] MatrixGenerics_1.8.1                       #> [22] matrixStats_0.62.0                         #> [23] MicrobiomeBenchmarkDataAnalyses_0.0.0.9000 #>  #> loaded via a namespace (and not attached): #>   [1] softImpute_1.4-1            pbapply_1.5-0               #>   [3] lattice_0.20-45             vctrs_0.4.1                 #>   [5] expm_0.999-6                mgcv_1.8-40                 #>   [7] beanplot_1.3.1              blob_1.2.3                  #>   [9] survival_3.4-0              nloptr_2.0.3                #>  [11] spatstat.data_2.2-0         later_1.3.0                 #>  [13] DBI_1.1.3                   rappdirs_0.3.3              #>  [15] uwot_0.1.11                 jpeg_0.1-9                  #>  [17] zlibbioc_1.42.0             MatrixModels_0.5-0          #>  [19] rgeos_0.5-9                 htmlwidgets_1.5.4           #>  [21] mvtnorm_1.1-3               future_1.27.0               #>  [23] leiden_0.4.2                ANCOMBC_1.6.2               #>  [25] parallel_4.2.1              scater_1.24.0               #>  [27] irlba_2.3.5                 illuminaio_0.38.0           #>  [29] Rcpp_1.0.9                  readr_2.1.2                 #>  [31] KernSmooth_2.23-20          promises_1.2.0.1            #>  [33] DelayedArray_0.22.0         methylumi_2.42.0            #>  [35] limma_3.52.2                vegan_2.6-2                 #>  [37] Hmisc_4.7-1                 fs_1.5.2                    #>  [39] textshaping_0.3.6           digest_0.6.29               #>  [41] png_0.1-7                   nor1mix_1.3-0               #>  [43] sctransform_0.3.3           cowplot_1.1.1               #>  [45] nleqslv_3.3.3               glmnet_4.1-4                #>  [47] pkgconfig_2.0.3             spatstat.random_2.2-0       #>  [49] DelayedMatrixStats_1.18.0   ggbeeswarm_0.6.0            #>  [51] iterators_1.0.14            reticulate_1.25             #>  [53] ffpe_1.40.0                 beeswarm_0.4.0              #>  [55] modeltools_0.2-23           xfun_0.32                   #>  [57] bslib_0.4.0                 zoo_1.8-10                  #>  [59] tidyselect_1.1.2            reshape2_1.4.4              #>  [61] purrr_0.3.4                 ica_1.0-3                   #>  [63] viridisLite_0.4.0           rtracklayer_1.56.1          #>  [65] rlang_1.0.4                 jquerylib_0.1.4             #>  [67] glue_1.6.2                  RColorBrewer_1.1-3          #>  [69] RcppZiggurat_0.1.6          registry_0.5-1              #>  [71] stringr_1.4.0               DESeq2_1.36.0               #>  [73] labeling_0.4.2              SparseM_1.81                #>  [75] httpuv_1.6.5                biomformat_1.24.0           #>  [77] class_7.3-20                preprocessCore_1.58.0       #>  [79] BiocNeighbors_1.14.0        TH.data_1.1-1               #>  [81] Wrench_1.14.0               annotate_1.74.0             #>  [83] jsonlite_1.8.0              bit_4.0.4                   #>  [85] mime_0.12                   systemfonts_1.0.4           #>  [87] gplots_3.1.3                Rsamtools_2.12.0            #>  [89] Exact_3.1                   zCompositions_1.4.0-1       #>  [91] stringi_1.7.8               ROI_1.0-0                   #>  [93] spatstat.sparse_2.1-1       gsl_2.1-7.1                 #>  [95] rbibutils_2.2.9             scattermore_0.8             #>  [97] Rdpack_2.4                  yulab.utils_0.0.5           #>  [99] quadprog_1.5-8              bitops_1.0-7                #> [101] cli_3.3.0                   rhdf5filters_1.8.0          #> [103] ALDEx2_1.28.1               RSQLite_2.2.15              #> [105] tidyr_1.2.0                 libcoin_1.0-9               #> [107] data.table_1.14.2           bumphunter_1.38.0           #> [109] energy_1.7-10               rstudioapi_0.13             #> [111] microbiome_1.18.0           GenomicAlignments_1.32.1    #> [113] sfsmisc_1.1-13              nlme_3.1-159                #> [115] locfit_1.5-9.6              listenv_0.8.0               #> [117] DECIPHER_2.24.0             miniUI_0.1.1.1              #> [119] NADA_1.6-1.1                dbplyr_2.2.1                #> [121] readxl_1.4.0                TTR_0.24.3                  #> [123] lifecycle_1.0.1             cellranger_1.1.0            #> [125] munsell_0.5.0               caTools_1.18.2              #> [127] codetools_0.2-18            vipor_0.4.5                 #> [129] lmtest_0.9-40               htmlTable_2.4.1             #> [131] xtable_1.8-4                ROCR_1.0-11                 #> [133] BiocManager_1.30.18         abind_1.4-5                 #> [135] farver_2.1.1                parallelly_1.32.1           #> [137] RANN_2.6.1                  askpass_1.1                 #> [139] SeuratObject_4.1.0          BiocIO_1.6.0                #> [141] GEOquery_2.64.2             RcppAnnoy_0.0.19            #> [143] goftest_1.2-3               patchwork_1.1.1             #> [145] tibble_3.1.8                ggdendro_0.1.23             #> [147] cluster_2.1.3               future.apply_1.9.0          #> [149] Seurat_4.1.1                Matrix_1.4-1                #> [151] tidytree_0.4.0              ellipsis_0.3.2              #> [153] prettyunits_1.1.1           metagenomeSeq_1.38.0        #> [155] ggridges_0.5.3              mclust_5.4.10               #> [157] igraph_1.3.4                multtest_2.52.0             #> [159] minfi_1.42.0                slam_0.1-50                 #> [161] spatstat.utils_2.3-1        htmltools_0.5.3             #> [163] BiocFileCache_2.4.0         yaml_2.3.5                  #> [165] GenomicFeatures_1.48.3      utf8_1.2.2                  #> [167] plotly_4.10.0               XML_3.99-0.10               #> [169] pkgdown_2.0.6               e1071_1.7-11                #> [171] foreign_0.8-82              withr_2.5.0                 #> [173] scuttle_1.6.2               fitdistrplus_1.1-8          #> [175] BiocParallel_1.30.3         bit64_4.0.5                 #> [177] rngtools_1.5.2              doRNG_1.8.2                 #> [179] rootSolve_1.8.2.3           trust_0.1-8                 #> [181] affyio_1.66.0               multcomp_1.4-20             #> [183] foreach_1.5.2               spatstat.core_2.4-4         #> [185] progressr_0.10.1            ragg_1.2.2                  #> [187] rsvd_1.0.5                  ScaledMatrix_1.4.0          #> [189] memoise_2.0.1               evaluate_0.16               #> [191] VGAM_1.1-7                  forcats_0.5.1               #> [193] geneplotter_1.74.0          tzdb_0.3.0                  #> [195] permute_0.9-7               lmom_2.9                    #> [197] curl_4.3.2                  fansi_1.0.3                 #> [199] highr_0.9                   xts_0.12.1                  #> [201] ZINQ_1.0                    tensor_1.5                  #> [203] edgeR_3.38.4                checkmate_2.1.0             #> [205] cachem_1.0.6                desc_1.4.1                  #> [207] truncnorm_1.0-8             interp_1.1-3                #> [209] detectseparation_0.2        deldir_1.0-6                #> [211] corncob_0.2.0               rjson_0.2.21                #> [213] ggrepel_0.9.1               lumi_2.48.0                 #> [215] ade4_1.7-19                 rprojroot_2.0.3             #> [217] tools_4.2.1                 sass_0.4.2                  #> [219] sandwich_3.0-2              RCurl_1.98-1.8              #> [221] proxy_0.4-27                ape_5.6-2                   #> [223] xml2_1.3.3                  ROI.plugin.lpsolve_1.0-1    #> [225] httr_1.4.3                  assertthat_0.2.1            #> [227] rmarkdown_2.14              boot_1.3-28                 #> [229] globals_0.16.0              R6_2.5.1                    #> [231] Rhdf5lib_1.18.2             nnet_7.3-17                 #> [233] DirichletMultinomial_1.38.0 progress_1.2.2              #> [235] genefilter_1.78.0           KEGGREST_1.36.3             #> [237] treeio_1.20.1               gtools_3.9.3                #> [239] shape_1.4.6                 coin_1.4-2                  #> [241] beachmat_2.12.0             HDF5Array_1.24.2            #> [243] BiocSingular_1.12.0         rhdf5_2.40.0                #> [245] splines_4.2.1               colorspace_2.0-3            #> [247] generics_0.1.3              base64enc_0.1-3             #> [249] pillar_1.8.0                affy_1.74.0                 #> [251] sp_1.5-0                    GenomeInfoDbData_1.2.8      #> [253] plyr_1.8.7                  gtable_0.3.0                #> [255] restfulr_0.0.15             lpSolveAPI_5.5.2.0-17.8     #> [257] latticeExtra_0.6-30         knitr_1.39                  #> [259] biomaRt_2.52.0              fastmap_1.1.0               #> [261] doParallel_1.0.17           quantreg_5.94               #> [263] AnnotationDbi_1.58.0        Rfast_2.0.6                 #> [265] backports_1.4.1             openssl_2.0.2               #> [267] scales_1.2.0                filelock_1.0.2              #> [269] base64_2.0                  decontam_1.16.0             #> [271] gld_2.6.5                   hms_1.1.1                   #> [273] scrime_1.3.5                Rtsne_0.16                  #> [275] shiny_1.7.2                 MGLM_0.2.1                  #> [277] polyclip_1.10-0             grid_4.2.1                  #> [279] numDeriv_2016.8-1.1         siggenes_1.70.0             #> [281] DescTools_0.99.45           lazyeval_0.2.2              #> [283] Formula_1.2-4               crayon_1.5.1                #> [285] MASS_7.3-58.1               MAST_1.22.0                 #> [287] sparseMatrixStats_1.8.0     viridis_0.6.2               #> [289] reshape_0.8.9               rpart_4.1.16                #> [291] compiler_4.2.1              spatstat.geom_2.4-0         #> [293] zinbwave_1.18.0"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35_subset.html","id":"import-data","dir":"Articles","previous_headings":"","what":"Import data","title":"HMP_2012_16S_gingival_V35_subset - subgingival vs supragingival","text":"","code":"dat_name <-'HMP_2012_16S_gingival_V35_subset' conditions_col <- 'body_subsite' conditions <- c(condB = 'subgingival_plaque', condA = 'supragingival_plaque')  tse <- getBenchmarkData(dat_name, dryrun = FALSE)[[1]]  tse <- filterTaxa(tse)  colData(tse)[[conditions_col]] <-      factor(colData(tse)[[conditions_col]], levels = conditions)  tse ## class: TreeSummarizedExperiment  ## dim: 783 76  ## metadata(0): ## assays(1): counts ## rownames(783): OTU_97.31247 OTU_97.44487 ... OTU_97.45365 OTU_97.45307 ## rowData names(7): kingdom phylum ... genus taxon_annotation ## colnames(76): 700023057 700023179 ... 700114009 700114338 ## colData names(13): dataset subject_id ... sequencing_method ##   variable_region_16s ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (783 rows) ## rowTree: 1 phylo tree(s) (892 leaves) ## colLinks: NULL ## colTree: NULL"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35_subset.html","id":"prior-knowledge","dir":"Articles","previous_headings":"","what":"Prior knowledge","title":"HMP_2012_16S_gingival_V35_subset - subgingival vs supragingival","text":"","code":"row_data <- as.data.frame(rowData(tse)) prior_info <- row_data[, c('genus', 'taxon_annotation')] prior_info$taxon_name <- rownames(prior_info) prior_info$new_names <- paste0(prior_info$taxon_name, '|', prior_info$genus) head(prior_info) ##                      genus      taxon_annotation   taxon_name ## OTU_97.31247 Streptococcus facultative_anaerobic OTU_97.31247 ## OTU_97.44487 Streptococcus facultative_anaerobic OTU_97.44487 ## OTU_97.34979 Streptococcus facultative_anaerobic OTU_97.34979 ## OTU_97.34572 Streptococcus facultative_anaerobic OTU_97.34572 ## OTU_97.42259 Streptococcus facultative_anaerobic OTU_97.42259 ## OTU_97.34698 Streptococcus facultative_anaerobic OTU_97.34698 ##                               new_names ## OTU_97.31247 OTU_97.31247|Streptococcus ## OTU_97.44487 OTU_97.44487|Streptococcus ## OTU_97.34979 OTU_97.34979|Streptococcus ## OTU_97.34572 OTU_97.34572|Streptococcus ## OTU_97.42259 OTU_97.42259|Streptococcus ## OTU_97.34698 OTU_97.34698|Streptococcus"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35_subset.html","id":"convert-to-phyloseq","dir":"Articles","previous_headings":"","what":"Convert to phyloseq","title":"HMP_2012_16S_gingival_V35_subset - subgingival vs supragingival","text":"","code":"ps <- makePhyloseqFromTreeSummarizedExperiment(tse) phyloseq::sample_data(ps)$body_subsite <-      factor(phyloseq::sample_data(ps)$body_subsite) ps ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 783 taxa and 76 samples ] ## sample_data() Sample Data:       [ 76 samples by 13 sample variables ] ## tax_table()   Taxonomy Table:    [ 783 taxa by 6 taxonomic ranks ] ## phy_tree()    Phylogenetic Tree: [ 783 tips and 778 internal nodes ]"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35_subset.html","id":"run-da","dir":"Articles","previous_headings":"","what":"Run DA","title":"HMP_2012_16S_gingival_V35_subset - subgingival vs supragingival","text":"","code":"time_start <- Sys.time() DA_output <- run_DA(ps, conditions_col, conditions) time_end <- Sys.time() time_elapsed <- time_end - time_start time_elapsed ## Time difference of 3.976798 mins"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35_subset.html","id":"enrichment","dir":"Articles","previous_headings":"","what":"Enrichment","title":"HMP_2012_16S_gingival_V35_subset - subgingival vs supragingival","text":"Get direction","code":"direction <- get_direction_cols(DA_output, conditions_col, conditions)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35_subset.html","id":"enrichment-adjp-0-1","dir":"Articles","previous_headings":"Enrichment","what":"Enrichment (adjP <= 0.1)","title":"HMP_2012_16S_gingival_V35_subset - subgingival vs supragingival","text":"","code":"enrichment <- createEnrichment(     object = DA_output,     priorKnowledge = prior_info,     enrichmentCol = \"taxon_annotation\",     namesCol = \"new_names\",     slot = \"pValMat\", colName = \"adjP\", type = \"pvalue\",     direction = direction,     threshold_pvalue = 0.1,     threshold_logfc = 0,     top = NULL, # No top feature selected     alternative = \"greater\",     verbose = FALSE  )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35_subset.html","id":"plot-enrichment","dir":"Articles","previous_headings":"Enrichment","what":"Plot enrichment","title":"HMP_2012_16S_gingival_V35_subset - subgingival vs supragingival","text":"","code":"enrich_plot <- plot_enrichment(     enrichment = enrichment,      enrichment_col = \"taxon_annotation\",     levels_to_plot = c(\"aerobic\", \"anaerobic\", \"facultative_anaerobic\"),     conditions = c(condB = 'subgingival', condA = 'supragingival')  ) enrich_plot <- enrich_plot +      labs(y = 'Number of OTUs') enrich_plot"},{"path":[]},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35_subset.html","id":"calculate-tp---fp-ratio-no-threshold","dir":"Articles","previous_headings":"Putative true positives - putative false positives","what":"Calculate TP - FP ratio (no threshold)","title":"HMP_2012_16S_gingival_V35_subset - subgingival vs supragingival","text":"","code":"positives <- createPositives(     object = DA_output,      priorKnowledge = prior_info,      enrichmentCol = \"taxon_annotation\", namesCol = \"new_names\",     slot = \"pValMat\", colName = \"adjP\", type = \"pvalue\",     direction = direction,     threshold_pvalue = 1,     threshold_logfc = 0,     top = seq.int(from = 0, to = 50, by = 5),     alternative = \"greater\",     verbose = FALSE,     TP = list(c(\"DOWN Abundant\", \"anaerobic\"), c(\"UP Abundant\", \"aerobic\")),     FP = list(c(\"DOWN Abundant\", \"aerobic\"), c(\"UP Abundant\", \"anaerobic\")) ) |>      left_join(get_meth_class(), by = 'method')"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35_subset.html","id":"plot-tp---fp","dir":"Articles","previous_headings":"Putative true positives - putative false positives","what":"Plot TP - FP","title":"HMP_2012_16S_gingival_V35_subset - subgingival vs supragingival","text":"","code":"positive_plots <- plot_positives(positives) grid.arrange(grobs = positive_plots, ncol = 3)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_16S_gingival_V35_subset.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"HMP_2012_16S_gingival_V35_subset - subgingival vs supragingival","text":"","code":"sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] gridExtra_2.3                              ##  [2] ggplot2_3.3.6                              ##  [3] dplyr_1.0.9                                ##  [4] benchdamic_1.3.1                           ##  [5] mia_1.4.0                                  ##  [6] MultiAssayExperiment_1.22.0                ##  [7] MicrobiomeBenchmarkData_0.99.0             ##  [8] TreeSummarizedExperiment_2.4.0             ##  [9] Biostrings_2.64.0                          ## [10] XVector_0.36.0                             ## [11] SingleCellExperiment_1.18.0                ## [12] SummarizedExperiment_1.26.1                ## [13] Biobase_2.56.0                             ## [14] GenomicRanges_1.48.0                       ## [15] GenomeInfoDb_1.32.3                        ## [16] IRanges_2.30.0                             ## [17] S4Vectors_0.34.0                           ## [18] BiocGenerics_0.42.0                        ## [19] MatrixGenerics_1.8.1                       ## [20] matrixStats_0.62.0                         ## [21] MicrobiomeBenchmarkDataAnalyses_0.0.0.9000 ##  ## loaded via a namespace (and not attached): ##   [1] softImpute_1.4-1            pbapply_1.5-0               ##   [3] lattice_0.20-45             vctrs_0.4.1                 ##   [5] expm_0.999-6                mgcv_1.8-40                 ##   [7] beanplot_1.3.1              blob_1.2.3                  ##   [9] survival_3.4-0              nloptr_2.0.3                ##  [11] spatstat.data_2.2-0         later_1.3.0                 ##  [13] DBI_1.1.3                   rappdirs_0.3.3              ##  [15] uwot_0.1.11                 jpeg_0.1-9                  ##  [17] zlibbioc_1.42.0             MatrixModels_0.5-0          ##  [19] rgeos_0.5-9                 htmlwidgets_1.5.4           ##  [21] mvtnorm_1.1-3               future_1.27.0               ##  [23] leiden_0.4.2                ANCOMBC_1.6.2               ##  [25] parallel_4.2.1              scater_1.24.0               ##  [27] irlba_2.3.5                 illuminaio_0.38.0           ##  [29] Rcpp_1.0.9                  readr_2.1.2                 ##  [31] KernSmooth_2.23-20          promises_1.2.0.1            ##  [33] DelayedArray_0.22.0         methylumi_2.42.0            ##  [35] limma_3.52.2                vegan_2.6-2                 ##  [37] Hmisc_4.7-1                 fs_1.5.2                    ##  [39] textshaping_0.3.6           digest_0.6.29               ##  [41] png_0.1-7                   nor1mix_1.3-0               ##  [43] sctransform_0.3.3           cowplot_1.1.1               ##  [45] nleqslv_3.3.3               glmnet_4.1-4                ##  [47] pkgconfig_2.0.3             spatstat.random_2.2-0       ##  [49] DelayedMatrixStats_1.18.0   ggbeeswarm_0.6.0            ##  [51] iterators_1.0.14            reticulate_1.25             ##  [53] ffpe_1.40.0                 beeswarm_0.4.0              ##  [55] modeltools_0.2-23           xfun_0.32                   ##  [57] bslib_0.4.0                 zoo_1.8-10                  ##  [59] tidyselect_1.1.2            reshape2_1.4.4              ##  [61] purrr_0.3.4                 ica_1.0-3                   ##  [63] viridisLite_0.4.0           rtracklayer_1.56.1          ##  [65] rlang_1.0.4                 jquerylib_0.1.4             ##  [67] glue_1.6.2                  RColorBrewer_1.1-3          ##  [69] RcppZiggurat_0.1.6          registry_0.5-1              ##  [71] stringr_1.4.0               DESeq2_1.36.0               ##  [73] phyloseq_1.40.0             labeling_0.4.2              ##  [75] SparseM_1.81                httpuv_1.6.5                ##  [77] biomformat_1.24.0           class_7.3-20                ##  [79] preprocessCore_1.58.0       BiocNeighbors_1.14.0        ##  [81] TH.data_1.1-1               Wrench_1.14.0               ##  [83] annotate_1.74.0             jsonlite_1.8.0              ##  [85] bit_4.0.4                   mime_0.12                   ##  [87] systemfonts_1.0.4           gplots_3.1.3                ##  [89] Rsamtools_2.12.0            Exact_3.1                   ##  [91] zCompositions_1.4.0-1       stringi_1.7.8               ##  [93] ROI_1.0-0                   spatstat.sparse_2.1-1       ##  [95] gsl_2.1-7.1                 rbibutils_2.2.9             ##  [97] scattermore_0.8             Rdpack_2.4                  ##  [99] yulab.utils_0.0.5           quadprog_1.5-8              ## [101] bitops_1.0-7                cli_3.3.0                   ## [103] rhdf5filters_1.8.0          ALDEx2_1.28.1               ## [105] RSQLite_2.2.15              tidyr_1.2.0                 ## [107] libcoin_1.0-9               data.table_1.14.2           ## [109] bumphunter_1.38.0           energy_1.7-10               ## [111] rstudioapi_0.13             microbiome_1.18.0           ## [113] GenomicAlignments_1.32.1    sfsmisc_1.1-13              ## [115] nlme_3.1-159                locfit_1.5-9.6              ## [117] listenv_0.8.0               DECIPHER_2.24.0             ## [119] miniUI_0.1.1.1              NADA_1.6-1.1                ## [121] dbplyr_2.2.1                readxl_1.4.0                ## [123] TTR_0.24.3                  lifecycle_1.0.1             ## [125] cellranger_1.1.0            munsell_0.5.0               ## [127] caTools_1.18.2              codetools_0.2-18            ## [129] vipor_0.4.5                 lmtest_0.9-40               ## [131] htmlTable_2.4.1             xtable_1.8-4                ## [133] ROCR_1.0-11                 BiocManager_1.30.18         ## [135] abind_1.4-5                 farver_2.1.1                ## [137] parallelly_1.32.1           RANN_2.6.1                  ## [139] askpass_1.1                 SeuratObject_4.1.0          ## [141] BiocIO_1.6.0                GEOquery_2.64.2             ## [143] RcppAnnoy_0.0.19            goftest_1.2-3               ## [145] patchwork_1.1.1             tibble_3.1.8                ## [147] ggdendro_0.1.23             cluster_2.1.3               ## [149] future.apply_1.9.0          Seurat_4.1.1                ## [151] Matrix_1.4-1                tidytree_0.4.0              ## [153] ellipsis_0.3.2              prettyunits_1.1.1           ## [155] metagenomeSeq_1.38.0        ggridges_0.5.3              ## [157] mclust_5.4.10               igraph_1.3.4                ## [159] multtest_2.52.0             minfi_1.42.0                ## [161] slam_0.1-50                 spatstat.utils_2.3-1        ## [163] htmltools_0.5.3             BiocFileCache_2.4.0         ## [165] yaml_2.3.5                  GenomicFeatures_1.48.3      ## [167] utf8_1.2.2                  plotly_4.10.0               ## [169] XML_3.99-0.10               pkgdown_2.0.6               ## [171] e1071_1.7-11                foreign_0.8-82              ## [173] withr_2.5.0                 scuttle_1.6.2               ## [175] fitdistrplus_1.1-8          BiocParallel_1.30.3         ## [177] bit64_4.0.5                 rngtools_1.5.2              ## [179] doRNG_1.8.2                 rootSolve_1.8.2.3           ## [181] trust_0.1-8                 affyio_1.66.0               ## [183] multcomp_1.4-20             foreach_1.5.2               ## [185] spatstat.core_2.4-4         progressr_0.10.1            ## [187] ragg_1.2.2                  rsvd_1.0.5                  ## [189] ScaledMatrix_1.4.0          memoise_2.0.1               ## [191] evaluate_0.16               VGAM_1.1-7                  ## [193] forcats_0.5.1               geneplotter_1.74.0          ## [195] tzdb_0.3.0                  permute_0.9-7               ## [197] lmom_2.9                    curl_4.3.2                  ## [199] fansi_1.0.3                 highr_0.9                   ## [201] xts_0.12.1                  ZINQ_1.0                    ## [203] tensor_1.5                  edgeR_3.38.4                ## [205] checkmate_2.1.0             cachem_1.0.6                ## [207] desc_1.4.1                  truncnorm_1.0-8             ## [209] interp_1.1-3                detectseparation_0.2        ## [211] deldir_1.0-6                corncob_0.2.0               ## [213] rjson_0.2.21                ggrepel_0.9.1               ## [215] lumi_2.48.0                 ade4_1.7-19                 ## [217] rprojroot_2.0.3             tools_4.2.1                 ## [219] sass_0.4.2                  sandwich_3.0-2              ## [221] magrittr_2.0.3              RCurl_1.98-1.8              ## [223] proxy_0.4-27                ape_5.6-2                   ## [225] xml2_1.3.3                  ROI.plugin.lpsolve_1.0-1    ## [227] httr_1.4.3                  assertthat_0.2.1            ## [229] rmarkdown_2.14              boot_1.3-28                 ## [231] globals_0.16.0              R6_2.5.1                    ## [233] Rhdf5lib_1.18.2             nnet_7.3-17                 ## [235] DirichletMultinomial_1.38.0 progress_1.2.2              ## [237] genefilter_1.78.0           KEGGREST_1.36.3             ## [239] treeio_1.20.1               gtools_3.9.3                ## [241] shape_1.4.6                 coin_1.4-2                  ## [243] beachmat_2.12.0             HDF5Array_1.24.2            ## [245] BiocSingular_1.12.0         rhdf5_2.40.0                ## [247] splines_4.2.1               colorspace_2.0-3            ## [249] generics_0.1.3              base64enc_0.1-3             ## [251] pillar_1.8.0                affy_1.74.0                 ## [253] sp_1.5-0                    GenomeInfoDbData_1.2.8      ## [255] plyr_1.8.7                  gtable_0.3.0                ## [257] restfulr_0.0.15             lpSolveAPI_5.5.2.0-17.8     ## [259] latticeExtra_0.6-30         knitr_1.39                  ## [261] biomaRt_2.52.0              fastmap_1.1.0               ## [263] doParallel_1.0.17           quantreg_5.94               ## [265] AnnotationDbi_1.58.0        Rfast_2.0.6                 ## [267] backports_1.4.1             openssl_2.0.2               ## [269] scales_1.2.0                filelock_1.0.2              ## [271] base64_2.0                  decontam_1.16.0             ## [273] gld_2.6.5                   hms_1.1.1                   ## [275] scrime_1.3.5                Rtsne_0.16                  ## [277] shiny_1.7.2                 MGLM_0.2.1                  ## [279] polyclip_1.10-0             grid_4.2.1                  ## [281] numDeriv_2016.8-1.1         siggenes_1.70.0             ## [283] DescTools_0.99.45           lazyeval_0.2.2              ## [285] Formula_1.2-4               crayon_1.5.1                ## [287] MASS_7.3-58.1               MAST_1.22.0                 ## [289] sparseMatrixStats_1.8.0     viridis_0.6.2               ## [291] reshape_0.8.9               rpart_4.1.16                ## [293] compiler_4.2.1              spatstat.geom_2.4-0         ## [295] zinbwave_1.18.0"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_WMS_gingival.html","id":"import-data","dir":"Articles","previous_headings":"","what":"Import data","title":"HMP_2012_WMS_gingiva - Supragingival vs subgingival plaque","text":"","code":"dat_name <-'HMP_2012_WMS_gingival' conditions_col <- 'body_subsite' conditions <- c(condB = 'subgingival_plaque', condA = 'supragingival_plaque')  tse <- getBenchmarkData(dat_name, dryrun = FALSE)[[1]] tse <- filterTaxa(tse)  colData(tse)[[conditions_col]] <-      factor(colData(tse)[[conditions_col]], levels = conditions)  tse ## class: TreeSummarizedExperiment  ## dim: 189 16  ## metadata(0): ## assays(1): counts ## rownames(189): Streptococcus_parasanguinis Veillonella_dispar ... ##   Prevotella_baroniae Propionibacterium_acidifaciens ## rowData names(8): kingdom phylum ... species taxon_annotation ## colnames(16): SRS013949 SRS013950 ... SRS063215 SRS065310 ## colData names(24): dataset subject_id ... curator BMI ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (189 rows) ## rowTree: 1 phylo tree(s) (10430 leaves) ## colLinks: NULL ## colTree: NULL"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_WMS_gingival.html","id":"prior-knowledge","dir":"Articles","previous_headings":"","what":"Prior knowledge","title":"HMP_2012_WMS_gingiva - Supragingival vs subgingival plaque","text":"","code":"row_data <- as.data.frame(rowData(tse)) prior_info <- row_data[, c('genus', 'taxon_annotation')] prior_info$taxon_name <- rownames(prior_info) prior_info$new_names <- paste0(prior_info$taxon_name, '|', prior_info$genus) head(prior_info) ##                                     genus      taxon_annotation ## Streptococcus_parasanguinis Streptococcus facultative_anaerobic ## Veillonella_dispar            Veillonella             anaerobic ## Veillonella_atypica           Veillonella             anaerobic ## Veillonella_parvula           Veillonella             anaerobic ## Haemophilus_parainfluenzae    Haemophilus facultative_anaerobic ## Dialister_invisus               Dialister             anaerobic ##                                              taxon_name ## Streptococcus_parasanguinis Streptococcus_parasanguinis ## Veillonella_dispar                   Veillonella_dispar ## Veillonella_atypica                 Veillonella_atypica ## Veillonella_parvula                 Veillonella_parvula ## Haemophilus_parainfluenzae   Haemophilus_parainfluenzae ## Dialister_invisus                     Dialister_invisus ##                                                             new_names ## Streptococcus_parasanguinis Streptococcus_parasanguinis|Streptococcus ## Veillonella_dispar                     Veillonella_dispar|Veillonella ## Veillonella_atypica                   Veillonella_atypica|Veillonella ## Veillonella_parvula                   Veillonella_parvula|Veillonella ## Haemophilus_parainfluenzae     Haemophilus_parainfluenzae|Haemophilus ## Dialister_invisus                         Dialister_invisus|Dialister"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_WMS_gingival.html","id":"convert-to-phyloseq","dir":"Articles","previous_headings":"","what":"Convert to phyloseq","title":"HMP_2012_WMS_gingiva - Supragingival vs subgingival plaque","text":"","code":"ps <- makePhyloseqFromTreeSummarizedExperiment(tse) phyloseq::sample_data(ps)$body_subsite <-      factor(phyloseq::sample_data(ps)$body_subsite) ps ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 189 taxa and 16 samples ] ## sample_data() Sample Data:       [ 16 samples by 24 sample variables ] ## tax_table()   Taxonomy Table:    [ 189 taxa by 7 taxonomic ranks ] ## phy_tree()    Phylogenetic Tree: [ 189 tips and 188 internal nodes ]"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_WMS_gingival.html","id":"run-da","dir":"Articles","previous_headings":"","what":"Run DA","title":"HMP_2012_WMS_gingiva - Supragingival vs subgingival plaque","text":"","code":"DA_output <- run_DA(ps, conditions_col, conditions)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_WMS_gingival.html","id":"enrichment","dir":"Articles","previous_headings":"","what":"Enrichment","title":"HMP_2012_WMS_gingiva - Supragingival vs subgingival plaque","text":"Get direction","code":"direction <- get_direction_cols(DA_output, conditions_col, conditions)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_WMS_gingival.html","id":"enrichment-adjp-0-1","dir":"Articles","previous_headings":"Enrichment","what":"Enrichment (adjP <= 0.1)","title":"HMP_2012_WMS_gingiva - Supragingival vs subgingival plaque","text":"","code":"enrichment <- createEnrichment(     object = DA_output,     priorKnowledge = prior_info,     enrichmentCol = \"taxon_annotation\",     namesCol = \"taxon_name\",     slot = \"pValMat\", colName = \"adjP\", type = \"pvalue\",     direction = direction,     threshold_pvalue = 0.1,     threshold_logfc = 0,     top = NULL, # No top feature selected     alternative = \"greater\",     verbose = FALSE  )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_WMS_gingival.html","id":"plot-enrichment","dir":"Articles","previous_headings":"Enrichment","what":"Plot enrichment","title":"HMP_2012_WMS_gingiva - Supragingival vs subgingival plaque","text":"","code":"enrich_plot <- plot_enrichment(     enrichment = enrichment,      enrichment_col = \"taxon_annotation\",     levels_to_plot = c(\"aerobic\", \"anaerobic\", \"facultative_anaerobic\"),     conditions = conditions ) enrich_plot +     labs(y = 'Number of species')"},{"path":[]},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_WMS_gingival.html","id":"calculate-tp---fp-ratio-no-threshold","dir":"Articles","previous_headings":"Putative true positives - putative false positives","what":"Calculate TP - FP ratio (no threshold)","title":"HMP_2012_WMS_gingiva - Supragingival vs subgingival plaque","text":"","code":"positives <- createPositives(     object = DA_output,      priorKnowledge = prior_info,      enrichmentCol = \"taxon_annotation\", namesCol = \"taxon_name\",     slot = \"pValMat\", colName = \"adjP\", type = \"pvalue\",     direction = direction,     threshold_pvalue = 1,     threshold_logfc = 0,     top = seq.int(from = 0, to = 50, by = 5),     alternative = \"greater\",     verbose = FALSE,     TP = list(c(\"DOWN Abundant\", \"anaerobic\"), c(\"UP Abundant\", \"aerobic\")),     FP = list(c(\"DOWN Abundant\", \"aerobic\"), c(\"UP Abundant\", \"anaerobic\")) ) |>      left_join(get_meth_class(), by = 'method')"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_WMS_gingival.html","id":"plot-tp---fp","dir":"Articles","previous_headings":"Putative true positives - putative false positives","what":"Plot TP - FP","title":"HMP_2012_WMS_gingiva - Supragingival vs subgingival plaque","text":"","code":"positive_plots <- plot_positives(positives) grid.arrange(grobs = positive_plots, ncol = 3)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/HMP_2012_WMS_gingival.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"HMP_2012_WMS_gingiva - Supragingival vs subgingival plaque","text":"","code":"sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] gridExtra_2.3                              ##  [2] ggplot2_3.3.6                              ##  [3] dplyr_1.0.9                                ##  [4] benchdamic_1.3.1                           ##  [5] mia_1.4.0                                  ##  [6] MultiAssayExperiment_1.22.0                ##  [7] MicrobiomeBenchmarkData_0.99.0             ##  [8] TreeSummarizedExperiment_2.4.0             ##  [9] Biostrings_2.64.0                          ## [10] XVector_0.36.0                             ## [11] SingleCellExperiment_1.18.0                ## [12] SummarizedExperiment_1.26.1                ## [13] Biobase_2.56.0                             ## [14] GenomicRanges_1.48.0                       ## [15] GenomeInfoDb_1.32.3                        ## [16] IRanges_2.30.0                             ## [17] S4Vectors_0.34.0                           ## [18] BiocGenerics_0.42.0                        ## [19] MatrixGenerics_1.8.1                       ## [20] matrixStats_0.62.0                         ## [21] MicrobiomeBenchmarkDataAnalyses_0.0.0.9000 ##  ## loaded via a namespace (and not attached): ##   [1] softImpute_1.4-1            pbapply_1.5-0               ##   [3] lattice_0.20-45             vctrs_0.4.1                 ##   [5] expm_0.999-6                mgcv_1.8-40                 ##   [7] beanplot_1.3.1              blob_1.2.3                  ##   [9] survival_3.4-0              nloptr_2.0.3                ##  [11] spatstat.data_2.2-0         later_1.3.0                 ##  [13] DBI_1.1.3                   rappdirs_0.3.3              ##  [15] uwot_0.1.11                 jpeg_0.1-9                  ##  [17] zlibbioc_1.42.0             MatrixModels_0.5-0          ##  [19] rgeos_0.5-9                 htmlwidgets_1.5.4           ##  [21] mvtnorm_1.1-3               future_1.27.0               ##  [23] leiden_0.4.2                ANCOMBC_1.6.2               ##  [25] parallel_4.2.1              scater_1.24.0               ##  [27] irlba_2.3.5                 illuminaio_0.38.0           ##  [29] Rcpp_1.0.9                  readr_2.1.2                 ##  [31] KernSmooth_2.23-20          promises_1.2.0.1            ##  [33] DelayedArray_0.22.0         methylumi_2.42.0            ##  [35] limma_3.52.2                vegan_2.6-2                 ##  [37] Hmisc_4.7-1                 fs_1.5.2                    ##  [39] textshaping_0.3.6           digest_0.6.29               ##  [41] png_0.1-7                   nor1mix_1.3-0               ##  [43] sctransform_0.3.3           cowplot_1.1.1               ##  [45] nleqslv_3.3.3               glmnet_4.1-4                ##  [47] pkgconfig_2.0.3             spatstat.random_2.2-0       ##  [49] DelayedMatrixStats_1.18.0   ggbeeswarm_0.6.0            ##  [51] iterators_1.0.14            reticulate_1.25             ##  [53] ffpe_1.40.0                 beeswarm_0.4.0              ##  [55] modeltools_0.2-23           xfun_0.32                   ##  [57] bslib_0.4.0                 zoo_1.8-10                  ##  [59] tidyselect_1.1.2            reshape2_1.4.4              ##  [61] purrr_0.3.4                 ica_1.0-3                   ##  [63] viridisLite_0.4.0           rtracklayer_1.56.1          ##  [65] rlang_1.0.4                 jquerylib_0.1.4             ##  [67] glue_1.6.2                  RColorBrewer_1.1-3          ##  [69] RcppZiggurat_0.1.6          registry_0.5-1              ##  [71] stringr_1.4.0               DESeq2_1.36.0               ##  [73] phyloseq_1.40.0             labeling_0.4.2              ##  [75] SparseM_1.81                httpuv_1.6.5                ##  [77] biomformat_1.24.0           class_7.3-20                ##  [79] preprocessCore_1.58.0       BiocNeighbors_1.14.0        ##  [81] TH.data_1.1-1               Wrench_1.14.0               ##  [83] annotate_1.74.0             jsonlite_1.8.0              ##  [85] bit_4.0.4                   mime_0.12                   ##  [87] systemfonts_1.0.4           gplots_3.1.3                ##  [89] Rsamtools_2.12.0            Exact_3.1                   ##  [91] zCompositions_1.4.0-1       stringi_1.7.8               ##  [93] ROI_1.0-0                   spatstat.sparse_2.1-1       ##  [95] gsl_2.1-7.1                 rbibutils_2.2.9             ##  [97] scattermore_0.8             Rdpack_2.4                  ##  [99] yulab.utils_0.0.5           quadprog_1.5-8              ## [101] bitops_1.0-7                cli_3.3.0                   ## [103] rhdf5filters_1.8.0          ALDEx2_1.28.1               ## [105] RSQLite_2.2.15              tidyr_1.2.0                 ## [107] libcoin_1.0-9               data.table_1.14.2           ## [109] bumphunter_1.38.0           energy_1.7-10               ## [111] rstudioapi_0.13             microbiome_1.18.0           ## [113] GenomicAlignments_1.32.1    sfsmisc_1.1-13              ## [115] nlme_3.1-159                locfit_1.5-9.6              ## [117] listenv_0.8.0               DECIPHER_2.24.0             ## [119] miniUI_0.1.1.1              NADA_1.6-1.1                ## [121] dbplyr_2.2.1                readxl_1.4.0                ## [123] TTR_0.24.3                  lifecycle_1.0.1             ## [125] cellranger_1.1.0            munsell_0.5.0               ## [127] caTools_1.18.2              codetools_0.2-18            ## [129] vipor_0.4.5                 lmtest_0.9-40               ## [131] htmlTable_2.4.1             xtable_1.8-4                ## [133] ROCR_1.0-11                 BiocManager_1.30.18         ## [135] abind_1.4-5                 farver_2.1.1                ## [137] parallelly_1.32.1           RANN_2.6.1                  ## [139] askpass_1.1                 SeuratObject_4.1.0          ## [141] BiocIO_1.6.0                GEOquery_2.64.2             ## [143] RcppAnnoy_0.0.19            goftest_1.2-3               ## [145] patchwork_1.1.1             tibble_3.1.8                ## [147] ggdendro_0.1.23             cluster_2.1.3               ## [149] future.apply_1.9.0          Seurat_4.1.1                ## [151] Matrix_1.4-1                tidytree_0.4.0              ## [153] ellipsis_0.3.2              prettyunits_1.1.1           ## [155] metagenomeSeq_1.38.0        ggridges_0.5.3              ## [157] mclust_5.4.10               igraph_1.3.4                ## [159] multtest_2.52.0             minfi_1.42.0                ## [161] slam_0.1-50                 spatstat.utils_2.3-1        ## [163] htmltools_0.5.3             BiocFileCache_2.4.0         ## [165] yaml_2.3.5                  GenomicFeatures_1.48.3      ## [167] utf8_1.2.2                  plotly_4.10.0               ## [169] XML_3.99-0.10               pkgdown_2.0.6               ## [171] e1071_1.7-11                foreign_0.8-82              ## [173] withr_2.5.0                 scuttle_1.6.2               ## [175] fitdistrplus_1.1-8          BiocParallel_1.30.3         ## [177] bit64_4.0.5                 rngtools_1.5.2              ## [179] doRNG_1.8.2                 rootSolve_1.8.2.3           ## [181] trust_0.1-8                 affyio_1.66.0               ## [183] multcomp_1.4-20             foreach_1.5.2               ## [185] spatstat.core_2.4-4         progressr_0.10.1            ## [187] ragg_1.2.2                  rsvd_1.0.5                  ## [189] ScaledMatrix_1.4.0          memoise_2.0.1               ## [191] evaluate_0.16               VGAM_1.1-7                  ## [193] forcats_0.5.1               geneplotter_1.74.0          ## [195] tzdb_0.3.0                  permute_0.9-7               ## [197] lmom_2.9                    curl_4.3.2                  ## [199] fansi_1.0.3                 highr_0.9                   ## [201] xts_0.12.1                  ZINQ_1.0                    ## [203] tensor_1.5                  edgeR_3.38.4                ## [205] checkmate_2.1.0             cachem_1.0.6                ## [207] desc_1.4.1                  truncnorm_1.0-8             ## [209] interp_1.1-3                detectseparation_0.2        ## [211] deldir_1.0-6                corncob_0.2.0               ## [213] rjson_0.2.21                ggrepel_0.9.1               ## [215] lumi_2.48.0                 ade4_1.7-19                 ## [217] rprojroot_2.0.3             tools_4.2.1                 ## [219] sass_0.4.2                  sandwich_3.0-2              ## [221] magrittr_2.0.3              RCurl_1.98-1.8              ## [223] proxy_0.4-27                ape_5.6-2                   ## [225] xml2_1.3.3                  ROI.plugin.lpsolve_1.0-1    ## [227] httr_1.4.3                  assertthat_0.2.1            ## [229] rmarkdown_2.14              boot_1.3-28                 ## [231] globals_0.16.0              R6_2.5.1                    ## [233] Rhdf5lib_1.18.2             nnet_7.3-17                 ## [235] DirichletMultinomial_1.38.0 progress_1.2.2              ## [237] genefilter_1.78.0           KEGGREST_1.36.3             ## [239] treeio_1.20.1               gtools_3.9.3                ## [241] shape_1.4.6                 coin_1.4-2                  ## [243] beachmat_2.12.0             HDF5Array_1.24.2            ## [245] BiocSingular_1.12.0         rhdf5_2.40.0                ## [247] splines_4.2.1               colorspace_2.0-3            ## [249] generics_0.1.3              base64enc_0.1-3             ## [251] pillar_1.8.0                affy_1.74.0                 ## [253] sp_1.5-0                    GenomeInfoDbData_1.2.8      ## [255] plyr_1.8.7                  gtable_0.3.0                ## [257] restfulr_0.0.15             lpSolveAPI_5.5.2.0-17.8     ## [259] latticeExtra_0.6-30         knitr_1.39                  ## [261] biomaRt_2.52.0              fastmap_1.1.0               ## [263] doParallel_1.0.17           quantreg_5.94               ## [265] AnnotationDbi_1.58.0        Rfast_2.0.6                 ## [267] backports_1.4.1             openssl_2.0.2               ## [269] scales_1.2.0                filelock_1.0.2              ## [271] base64_2.0                  decontam_1.16.0             ## [273] gld_2.6.5                   hms_1.1.1                   ## [275] scrime_1.3.5                Rtsne_0.16                  ## [277] shiny_1.7.2                 MGLM_0.2.1                  ## [279] polyclip_1.10-0             grid_4.2.1                  ## [281] numDeriv_2016.8-1.1         siggenes_1.70.0             ## [283] DescTools_0.99.45           lazyeval_0.2.2              ## [285] Formula_1.2-4               crayon_1.5.1                ## [287] MASS_7.3-58.1               MAST_1.22.0                 ## [289] sparseMatrixStats_1.8.0     viridis_0.6.2               ## [291] reshape_0.8.9               rpart_4.1.16                ## [293] compiler_4.2.1              spatstat.geom_2.4-0         ## [295] zinbwave_1.18.0"},{"path":[]},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"import-summarize-by-genus-and-filter","dir":"Articles","previous_headings":"Data","what":"Import, summarize by genus, and filter","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"","code":"dat_name <- 'Ravel_2011_16S_BV' conditions_col <- 'study_condition' conditions <- c(condB = 'healthy', condA = 'bacterial_vaginosis')  tse <- getBenchmarkData(dat_name, dryrun = FALSE)[[1]]  ## Select equal number of samples per ethnicity group col_data <- as.data.frame(colData(tse)) |>      dplyr::filter(study_condition %in% conditions) row_names_list <- col_data |>      {\\(y) split(y, factor(y$ethnicity))}() |>      {\\(y) map(y, ~split(.x, .x$study_condition))}() |>      unlist(recursive = FALSE) |>      map(rownames) min_n <- row_names_list |>      map_int(length) |>      min() set.seed(4567) select_samples <- row_names_list |>      {\\(y) map(y, ~ sample(.x, min_n, replace = FALSE))}() |>       unlist(use.names = FALSE) tse_subset <- tse[, select_samples]  ## Summarize by genus tse_genus <- agglomerateByRank(tse_subset, rank = 'genus', na.rm = FALSE) tse_genus <- filterTaxa(tse_genus, min_ab = 1, min_per = 0.2) rownames(tse_genus) <- editMiaTaxaNames(tse_genus)  ## Get the right order of study conditions colData(tse_genus)$study_condition <-      factor(colData(tse_genus)$study_condition, levels = conditions)  tse_genus ## class: TreeSummarizedExperiment  ## dim: 32 80  ## metadata(1): agglomerated_by_rank ## assays(1): counts ## rownames(32): genus:Lactobacillus genus:Prevotella ... ##   genus:Anaeroglobus genus:Bulleidia ## rowData names(7): kingdom class ... species taxon_annotation ## colnames(80): S250 S383 ... S325 S276 ## colData names(17): dataset gender ... nugent_score_category ##   community_group ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: NULL ## rowTree: NULL ## colLinks: NULL ## colTree: NULL"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"get-prior-info","dir":"Articles","previous_headings":"Data","what":"Get prior info","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"biological information taxa","code":"prior_info <- as.data.frame(rowData(tse_genus)[, c('genus', 'taxon_annotation')]) prior_info <- rename(prior_info, taxon_name = genus) prior_info <- prior_info |>      mutate(         taxon_annotation = ifelse(             is.na(taxon_annotation), 'Unannotated', taxon_annotation         )     ) head(prior_info) ##                        taxon_name taxon_annotation ## genus:Lactobacillus Lactobacillus    hv-associated ## genus:Prevotella       Prevotella    bv-associated ## genus:Megasphaera     Megasphaera      Unannotated ## genus:Sneathia           Sneathia    bv-associated ## genus:Atopobium         Atopobium    bv-associated ## genus:Streptococcus Streptococcus    bv-associated"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"convert-to-phyloseq","dir":"Articles","previous_headings":"Data","what":"Convert to phyloseq","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"","code":"ps <- makePhyloseqFromTreeSummarizedExperiment(tse_genus) sample_data(ps)[[conditions_col]] <-      factor(sample_data(ps)[[conditions_col]], levels = conditions) ps ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 32 taxa and 80 samples ] ## sample_data() Sample Data:       [ 80 samples by 17 sample variables ] ## tax_table()   Taxonomy Table:    [ 32 taxa by 6 taxonomic ranks ]"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"benchdamic-workflow","dir":"Articles","previous_headings":"","what":"Benchdamic workflow","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"sections mostly follows benchdamic workflow. includes new DA methods added original workflow modified plots.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"run-differential-abundance-analysis","dir":"Articles","previous_headings":"Benchdamic workflow","what":"Run differential abundance analysis","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"DA analysis:","code":"ps <- runNormalizations(set_norm_list(), ps, verbose = FALSE) zw <- weights_ZINB(ps, design = conditions_col) DA_methods <- set_DA_methods_list(conditions_col, conditions)  ## ALDEX2 throws an error, so remove it DA_methods <- DA_methods[!names(DA_methods) == 'DA_ALDEx2.1']  ## run methods DA_output <- runDA(DA_methods, ps, weights = zw, verbose = FALSE)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"enrichment","dir":"Articles","previous_headings":"","what":"Enrichment","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"Get direction Create enrichment. Threshold values based adjusted p-values Create enrichment plot","code":"direction <- get_direction_cols(DA_output, conditions_col, conditions) enrichment <- createEnrichment(     object = DA_output,     priorKnowledge = prior_info,     enrichmentCol = \"taxon_annotation\",     namesCol = \"taxon_name\",     slot = \"pValMat\", colName = \"adjP\", type = \"pvalue\",     direction = direction,     threshold_pvalue = 0.1,     threshold_logfc = 0,     top = NULL,      alternative = \"greater\",     verbose = FALSE  ) enrich_plot <- plot_enrichment(     enrichment = enrichment,      enrichment_col = \"taxon_annotation\",     levels_to_plot = c(\"hv-associated\", \"bv-associated\"),     conditions = c(condB = \"HV\", condA = \"BV\")  ) enrich_plot <- enrich_plot +     labs(y = 'Number of genera') enrich_plot"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"plot-putative-true-positves-and-true-negatives-ratio","dir":"Articles","previous_headings":"","what":"Plot putative true positves and true negatives ratio","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"Create ‘positives’ object. thresholds added. Create putative positives plot","code":"positives <- createPositives(     object = DA_output,      priorKnowledge = prior_info,      enrichmentCol = \"taxon_annotation\", namesCol = \"taxon_name\",     slot = \"pValMat\", colName = \"adjP\", type = \"pvalue\",     direction = direction,     threshold_pvalue = 1,     threshold_logfc = 0,     top = seq.int(from = 0, to = 20, by = 2),     alternative = \"greater\",     verbose = FALSE,     TP = list(c(\"DOWN Abundant\", \"hv-associated\"), c(\"UP Abundant\", \"bv-associated\")),     FP = list(c(\"DOWN Abundant\", \"bv-associated\"), c(\"UP Abundant\", \"hv-associated\")) ) |>      left_join(get_meth_class(), by = 'method') |>      relocate(method_class) plots <- plot_positives(positives) grid.arrange(grobs = plots, ncol = 3)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"perform-da-with-lefse-wilcox-and-zinq-cauchy-manually","dir":"Articles","previous_headings":"","what":"Perform DA with lefse, Wilcox, and ZINQ-Cauchy manually","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"","code":"## Relative abundance (TSS - total sum scaling) assay(tse_genus, 'TSS') <- apply(assay(tse_genus), 2, function(x) {     (x + 1) / sum(x + 1) * 100  })  ## CLR transform assay(tse_genus, 'CLR') <- apply(assay(tse_genus), 2, function(x) {     (x + 1) / exp(mean(log(x + 1)))     # log((x + 1) / exp(mean(log(x + 1)))) })  ## Relative abundance + CLR transform assay(tse_genus, 'TSS + CLR') <- apply(assay(tse_genus, 'TSS'), 2, function(x) {     x / exp(mean(log(x)))     # log(x / exp(mean(log(x)))) })  data <- tidySummarizedExperiment::as_tibble(tse_genus) |>      rename(taxon_name = .feature, sample = .sample) |>      mutate(         taxon_annotation = ifelse(             is.na(taxon_annotation), 'Unannotated', taxon_annotation         )     ) head(data) ## # A tibble: 6 × 30 ##   taxon_n…¹ sample counts     TSS     CLR TSS +…² dataset gender body_…³ ncbi_…⁴ ##   <chr>     <chr>   <dbl>   <dbl>   <dbl>   <dbl> <chr>   <chr>  <chr>   <chr>   ## 1 genus:La… S250      565 30.6    129.    129.    Ravel_… female vagina  SRR062… ## 2 genus:Pr… S250      194 10.6     44.6    44.6   Ravel_… female vagina  SRR062… ## 3 genus:Me… S250      677 36.7    155.    155.    Ravel_… female vagina  SRR062… ## 4 genus:Sn… S250       24  1.35     5.72    5.72  Ravel_… female vagina  SRR062… ## 5 genus:At… S250      227 12.3     52.1    52.1   Ravel_… female vagina  SRR062… ## 6 genus:St… S250        0  0.0541   0.229   0.229 Ravel_… female vagina  SRR062… ## # … with 20 more variables: library_size <dbl>, sequencing_platform <chr>, ## #   pmid <dbl>, study_condition <fct>, sequencing_method <chr>, ## #   variable_region_16s <chr>, country <chr>, number_bases <dbl>, ## #   ethnicity <chr>, ph <dbl>, nugent_score <dbl>, nugent_score_category <chr>, ## #   community_group <chr>, kingdom <chr>, class <chr>, order <chr>, ## #   family <chr>, genus <chr>, species <chr>, taxon_annotation <chr>, and ## #   abbreviated variable names ¹​taxon_name, ²​`TSS + CLR`, ³​body_site, … ## # ℹ Use `colnames()` to see all variable names"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"wilcox","dir":"Articles","previous_headings":"Perform DA with lefse, Wilcox, and ZINQ-Cauchy manually","what":"Wilcox","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"Define function: Perform statistical test: Filter DA taxa Plot  Plot abundances taxa incorrect Let’s plot values matrix Box plot incorrect values:","code":"calcWilcox <- function(dat, val_col, log = FALSE) {          ## Separate components     taxa <- split(dat, factor(dat$taxon_name))     taxa_names <- names(taxa)     taxa_annotations <-          dplyr::distinct(dplyr::select(data, dplyr::starts_with('taxon')))          ## Perform Wilcoxon test      pvalues <- vector('double', length(taxa))     names(pvalues) <- taxa_names      formula_chr <- paste0(val_col, ' ~ study_condition')     for (i in seq_along(pvalues)) {         df <- taxa[[i]]         res <- stats::wilcox.test(formula = as.formula(formula_chr), data = df)         pvalues[[i]] <- res$p.value     }          ## Adjust P-values     adj_pvalues <- stats::p.adjust(pvalues, method = 'fdr')          ## Calculate fold change     log_fold_change <- vector('double', length(taxa))     for (i in seq_along(log_fold_change)) {         df <- taxa[[i]]         healthy <- df |>              dplyr::filter(study_condition == 'healthy') |>              {\\(y) y[[val_col]]}()         bv <- df |>              dplyr::filter(study_condition == 'bacterial_vaginosis') |>              {\\(y) y[[val_col]]}()                  if (log) { # If log, revert with exp            healthy <- mean(exp(healthy))            bv <- mean(exp(bv))         } else{             healthy <- mean(healthy)             bv <- mean(bv)         }                  if (bv >= healthy) { # control is healthy, condition of interest is bv                 log_fold_change[i] <- log2(bv / healthy)         } else if (bv < healthy) {                 log_fold_change[i] <- -log2(healthy / bv)         }     }          ## Combine results and annotations     pval_results <- data.frame(         taxon_name = taxa_names,         rawP = pvalues,         adjP = adj_pvalues,         logFC = log_fold_change     )          dplyr::left_join(pval_results, taxa_annotations, by = 'taxon_name') } wilcox <- list(     wilcox_counts = calcWilcox(data, 'counts'),     wilcox_relab = calcWilcox(data, 'TSS'),     wilcox_clr = calcWilcox(data, 'CLR'),     wilcox_relab_clr = calcWilcox(data, 'TSS + CLR') ) |>      bind_rows(.id = 'method') wilcox_DA <- wilcox |>      dplyr::filter(adjP <= 0.1, abs(logFC) > 0) |>      mutate(DA = ifelse(logFC > 0, \"OA\", \"UA\")) wilcox_DA |>      dplyr::filter(taxon_annotation != 'Unannotated') |>      count(method, taxon_annotation, DA) |>      mutate(n = ifelse(DA == 'UA', -n, n)) |>      mutate(method = sub('wilcox_', '', method)) |>      ggplot(aes(method, n)) +      geom_col(aes(fill = taxon_annotation), position = 'dodge') +     geom_hline(yintercept = 0) +     labs(         title = 'Wilcoxon test',         y = 'Number of DA taxa', x = 'Transformation method'      ) +     scale_y_continuous(limits = c(-3, 11), breaks = seq(-3, 11, 2)) incorrect_taxa_wilcox_clr <- wilcox_DA |>      dplyr::filter(         method == 'wilcox_clr', DA == 'UA',          taxon_annotation == 'bv-associated'     ) |>      pull(taxon_name) incorrect_taxa_wilcox_clr ## [1] \"genus:Actinomyces\"     \"genus:Corynebacterium\" transformations <- c('counts', 'TSS', 'CLR', 'TSS + CLR') l1 <- vector('list', length(transformations)) names(l1) <- transformations for (i in seq_along(transformations)) {     mat <- assay(tse_genus, transformations[i])     l1[[i]] <- mat[incorrect_taxa_wilcox_clr,] |>          as.data.frame() |>          tibble::rownames_to_column(var = 'taxon_name') |>          as_tibble()      }  wilcox_raw <- bind_rows(l1, .id = 'transformation') |>      {\\(y) pivot_longer(         y, cols = 3:ncol(y), values_to = 'value', names_to = 'sample'     )}() |>      left_join(data[,c('sample', 'study_condition')], by = 'sample')  head(wilcox_raw) ## # A tibble: 6 × 5 ##   transformation taxon_name        sample value study_condition     ##   <chr>          <chr>             <chr>  <dbl> <fct>               ## 1 counts         genus:Actinomyces S250       0 bacterial_vaginosis ## 2 counts         genus:Actinomyces S250       0 bacterial_vaginosis ## 3 counts         genus:Actinomyces S250       0 bacterial_vaginosis ## 4 counts         genus:Actinomyces S250       0 bacterial_vaginosis ## 5 counts         genus:Actinomyces S250       0 bacterial_vaginosis ## 6 counts         genus:Actinomyces S250       0 bacterial_vaginosis wilcox_genus_plot <- wilcox_raw |>      mutate(taxon_name = sub('genus:', '', taxon_name)) |>     mutate(value = log(value + 1)) |>      mutate(transformation = factor(         transformation, levels = c('counts', 'TSS', 'CLR', 'TSS + CLR' ),         labels = c('Counts', 'Relative abundance', 'CLR', 'Relative abundace + CLR')     )) |>      mutate(study_condition = factor(         study_condition, levels = c('healthy', 'bacterial_vaginosis'),         labels = c('HV', 'BV')     )) |>      ggplot(aes(taxon_name, value)) +      geom_boxplot(aes(color = study_condition)) +     facet_wrap(~ transformation, scales = 'free') +     labs(         y = 'log2(Abundance values)', x = 'Genus'     ) +     scale_color_manual(         values = c('dodgerblue1', 'firebrick1')     ) +     theme_bw() +     theme(         panel.grid.major.x = element_blank(),         legend.title = element_blank()     ) wilcox_genus_plot stats <- data |>      mutate(taxon_name = sub('genus:', '', taxon_name)) |>      filter(taxon_name %in% c('Actinomyces', 'Corynebacterium')) |>      group_by(study_condition, taxon_name) |>      summarise(         mean_counts = mean(counts),         sd_counts = sd(counts),         median_counts = median(counts),                  mean_TSS = mean(TSS),         sd_TSS = sd(TSS),         median_TSS = median(TSS),                  mean_CLR = mean(CLR),         sd_CLR = sd(CLR),         median_CLR = median(CLR),                  mean_TSS_CLR = mean(`TSS + CLR`),         sd_TSS_CLR = sd(`TSS + CLR`),         median_TSS_CLR = median(`TSS + CLR`)     ) |>      ungroup() |>      arrange(taxon_name) knitr::kable(stats) wilcox |>      mutate(         sig = ifelse(adjP <= 0.1, '*', '')     ) |>      mutate(sig2 = paste0(round(logFC, 2), ' ', sig)) |>      mutate(taxon_name = sub('genus:', '', taxon_name)) |>     mutate(taxon_name = as.factor(taxon_name)) |>      filter(taxon_name %in% c('Actinomyces', 'Corynebacterium')) |>      ggplot(aes(taxon_name, logFC)) +     geom_col(aes(fill = method), position = position_dodge(width = 0.9)) +     geom_text(         aes(label = sig2, group = method),          position = position_dodge(width = 0.9), vjust = -0.5     ) +     labs(         title = 'LogFC of taxa identified as significant (adjP <= 0.1) by CLR',         subtitle = 'logFC is indicated on top of bars. * means significant'     )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"lefse","dir":"Articles","previous_headings":"Perform DA with lefse, Wilcox, and ZINQ-Cauchy manually","what":"Lefse","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"Define function running Lefse: Run lefse Plot lefse results:","code":"calcLefse <- function(dat, assay) {     res <- lefser2(         dat, kruskal.threshold = 0.05, wilcox.threshold = 0.05,          lda.threshold = 0, groupCol = 'study_condition', assay = assay     )          adj_pvalues <- p.adjust(res$kw_pvalues)          dplyr::mutate(res, rawP = kw_pvalues, adjP = adj_pvalues)          # res <- lefser2(     #     dat, kruskal.threshold = 0.05, wilcox.threshold = 0.05,      #     lda.threshold = 0, groupCol = 'study_condition', assay = assay ,     #     log = log     # )          ## Add some made up rawP and adjP     # res |>      #     dplyr::mutate(     #         rawP = kw_pvalues,     #         adjP = stats::p.adjust(rawP, method = 'fdr')     #     ) } taxa_annotations <-         dplyr::distinct(dplyr::select(data, dplyr::starts_with('taxon'))) lefse <- list(     lefse_counts = calcLefse(tse_genus, 'counts'),     lefse_relab = calcLefse(tse_genus, 'TSS'),     lefse_clr = calcLefse(tse_genus, 'CLR'),     lefse_relab_clr = calcLefse(tse_genus, 'TSS + CLR') )  |>      bind_rows(.id = 'method') |>      mutate(         DA = ifelse(scores > 0, 'OA', 'UA')     ) |>      rename(taxon_name = 'Names') |>      left_join(taxa_annotations, by = 'taxon_name')  head(lefse) ##         method              taxon_name    scores   kw_pvalues         rawP ## 1 lefse_counts  family:Lachnospiraceae 1.8759279 9.489438e-05 9.489438e-05 ## 2 lefse_counts family:Oscillospiraceae 1.3801485 1.737376e-06 1.737376e-06 ## 3 lefse_counts   family:Prevotellaceae 0.8781151 1.826334e-08 1.826334e-08 ## 4 lefse_counts       genus:Actinomyces 0.5753518 2.016389e-03 2.016389e-03 ## 5 lefse_counts        genus:Aerococcus 1.4925514 7.902396e-07 7.902396e-07 ## 6 lefse_counts      genus:Anaerococcus 1.4981005 1.849079e-07 1.849079e-07 ##           adjP DA taxon_annotation ## 1 8.540494e-04 OA      Unannotated ## 2 2.432326e-05 OA      Unannotated ## 3 3.835301e-07 OA      Unannotated ## 4 4.322222e-03 OA    bv-associated ## 5 1.185359e-05 OA    bv-associated ## 6 2.958526e-06 OA      Unannotated lefse_DA <- lefse |>      dplyr::filter(adjP <= 0.1, abs(scores) > 0) |>      mutate(DA = ifelse(scores > 0, \"OA\", \"UA\")) lefse_DA |>      dplyr::filter(taxon_annotation != 'Unannotated') |>      count(method, taxon_annotation, DA) |>      mutate(n = ifelse(DA == 'UA', -n, n)) |>      mutate(method = sub('lefse_', '', method)) |>      ggplot(aes(method, n)) +      geom_col(aes(fill = taxon_annotation), position = 'dodge') +     geom_hline(yintercept = 0) +     labs(         title = 'LEfSe test',         y = 'Number of DA taxa', x = 'Transformation method'      ) +     scale_y_continuous(limits = c(-3, 11), breaks = seq(-3, 11, 2)) incorrect_taxa_lefse_clr <- lefse_DA |>      dplyr::filter(         method %in% c('lefse_clr', 'lefse_relab_clr'), DA == 'UA',          taxon_annotation == 'bv-associated'     ) |>      pull(taxon_name) |>      unique() incorrect_taxa_lefse_clr ## the same as in wilcox. ## [1] \"genus:Corynebacterium\""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"zinq","dir":"Articles","previous_headings":"Perform DA with lefse, Wilcox, and ZINQ-Cauchy manually","what":"ZINQ","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"Run ZINQ Plot ZINQ results","code":"calcZINQ <- function(dat, val_col, y_Cord = 'D', log = FALSE) {     taxa <- split(dat, dat$taxon_name)     taxa_names <- names(taxa)          taxa_annotations <-         dplyr::distinct(dplyr::select(dat, dplyr::starts_with('taxon')))          pvalues <- vector('double', length(taxa))     names(pvalues) <- taxa_names     form <- paste0(val_col, ' ~ study_condition')     for (i in seq_along(pvalues)) {         df <- taxa[[i]]                  res <- tryCatch(             error = function(e) NULL, {                 ZINQ::ZINQ_tests(                     formula.logistic = as.formula(form),                      formula.quantile = as.formula(form),                     C = 'study_condition', y_CorD = y_Cord, data = df                 )             }         )                  if (is.null(res)) {             pvalues[i] <- NA         } else {             pvalues[i] <- ZINQ::ZINQ_combination(res, method = 'Cauchy')         }      }          adj_pvalues <- p.adjust(pvalues, method = 'fdr')          log_fold_change <- vector('double', length(taxa))     for (i in seq_along(log_fold_change)) {         df <- taxa[[i]]         healthy <- df |>              dplyr::filter(study_condition == 'healthy') |>              {\\(y) y[[val_col]]}()         bv <- df |>              dplyr::filter(study_condition == 'bacterial_vaginosis') |>              {\\(y) y[[val_col]]}()                  if (log) { # If log, revert with exp             healthy <- mean(exp(healthy))             bv <- mean(exp(bv))         } else{             healthy <- mean(healthy)             bv <- mean(bv)         }                  if (bv >= healthy) { # control is healthy, condition of interest is bv             log_fold_change[i] <- log2(bv / healthy)         } else if (bv < healthy) {             log_fold_change[i] <- -log2(healthy / bv)         }     }          ## Combine results and annotations     output <- data.frame(         taxon_name = taxa_names,         rawP = pvalues,         adjP = adj_pvalues,         logFC = log_fold_change     )          return(output)     # dplyr::left_join(output, taxa_annotations, by = 'taxon_name')      } zinq <- list(     zinq_counts = calcZINQ(data, 'counts', y_Cord = 'D'),     zinq_relab = calcZINQ(data, 'TSS', y_Cord = 'C'),     zinq_clr = calcZINQ(data, 'CLR', y_Cord = 'C'),     zinq_relab_clr = calcZINQ(data, 'TSS + CLR', y_Cord = 'C') ) |>      bind_rows(.id = 'method') |>      mutate(         DA = ifelse(logFC > 0, 'OA', 'UA')     ) |>      left_join(taxa_annotations, by = 'taxon_name')  zinq_DA <- zinq |>      dplyr::filter(adjP <= 0.1, abs(logFC) > 0) |>      mutate(DA = ifelse(logFC > 0, \"OA\", \"UA\")) zinq_plot <- zinq_DA |>      dplyr::filter(taxon_annotation != 'Unannotated') |>      count(method, taxon_annotation, DA) |>      mutate(n = ifelse(DA == 'UA', -n, n)) |>      mutate(method = sub('lefse_', '', method)) |>      ggplot(aes(method, n)) +      geom_col(aes(fill = taxon_annotation), position = 'dodge') +     geom_hline(yintercept = 0) +     labs(         title = 'ZINQ test',         y = 'Number of DA taxa', x = 'Transformation method'      ) +     scale_y_continuous(limits = c(-3, 13), breaks = seq(-3, 13, 2)) zinq_plot incorrect_taxa_lefse_clr <- zinq_DA |>      dplyr::filter(         method %in% c('zinq_clr', 'zinq_relab_clr'), DA == 'UA',          taxon_annotation == 'bv-associated'     ) |>      pull(taxon_name) |>      unique() incorrect_taxa_lefse_clr ## the same as in wilcox. ## [1] \"genus:Actinomyces\"     \"genus:Corynebacterium\""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"ancom-bc-metagenomeseq-and-deseq2","dir":"Articles","previous_headings":"","what":"ANCOM-BC, MetagenomeSeq, and DESEQ2","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"ANCOM-BC MetagenomeSeq DESEQ2","code":"ancombc <- as.data.frame(DA_output$ancombc.none$statInfo) ancombc$taxon_name <- rownames(ancombc) ancombc <- left_join(ancombc, taxa_annotations, by = \"taxon_name\") |>      relocate(taxon_name, taxon_annotation) ancombc |>      filter(q_val <= 0.1, lfc < 0, taxon_annotation == 'bv-associated') |>      pull(taxon_name) ## [1] \"genus:Staphylococcus\"  \"genus:Corynebacterium\" \"genus:Actinomyces\" metagenomeseq <- as.data.frame(DA_output$metagenomeSeq.CSSmedian$statInfo) metagenomeseq$taxon_name <- rownames(metagenomeseq) metagenomeseq <- left_join(metagenomeseq, taxa_annotations, by = \"taxon_name\") |>      relocate(taxon_name, taxon_annotation) metagenomeseq |>      filter(         adjPvalues <= 0.1, study_conditionbacterial_vaginosis < 0,            taxon_annotation == 'bv-associated'     ) |>      pull(taxon_name) ## [1] \"genus:Corynebacterium\" deseq <- as.data.frame(DA_output$DESeq2.poscounts$statInfo) deseq$taxon_name <- rownames(deseq) deseq <- left_join(deseq, taxa_annotations, by = \"taxon_name\") |>      relocate(taxon_name, taxon_annotation) deseq |>      filter(         padj <= 0.1, log2FoldChange < 0,            taxon_annotation == 'bv-associated'     ) |>      pull(taxon_name) ## [1] \"genus:Staphylococcus\""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"plots-of-bv-associated-genera","dir":"Articles","previous_headings":"","what":"Plots of BV-associated genera","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"BV-associated bacteria present Ravel_2011 dataset. independent statistical test effect size calculation.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"clr","dir":"Articles","previous_headings":"Plots of BV-associated genera","what":"CLR","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"","code":"data |>      filter(taxon_annotation == 'bv-associated') |>      mutate(taxon_name = sub(\"^genus:\", \"\", taxon_name)) |>      mutate(CLR = log(CLR + 1)) |>      ggplot(aes(taxon_name, CLR)) +     geom_boxplot(aes(color = study_condition)) +      labs(         title = 'CLR values of BV-associated bacteria',         x = 'Genus', y = 'log(CLR)'     ) +     theme_bw() +      theme(         axis.text.x = element_text(angle = 45, hjust = 1)     )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"relative-abundance","dir":"Articles","previous_headings":"Plots of BV-associated genera","what":"Relative abundance","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"","code":"data |>      filter(taxon_annotation == 'bv-associated') |>      mutate(taxon_name = sub(\"^genus:\", \"\", taxon_name)) |>      mutate(TSS = log(TSS + 1)) |>      ggplot(aes(taxon_name, TSS)) +     geom_boxplot(aes(color = study_condition)) +      labs(title = 'Relative abundance values of BV-associated bacteria',          y = 'log2(relative abundance)') +     theme_bw() +      theme(         axis.text.x = element_text(angle = 45, hjust = 1)     )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"compositions-with-tss-data","dir":"Articles","previous_headings":"Plots of BV-associated genera","what":"Compositions with TSS data","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"order taxa","code":"first_set <- data |>      filter(         nugent_score_category == 'low',         taxon_annotation == 'hv-associated'     ) |>      arrange(desc(TSS)) |>      pull(sample)   second_set <- data |>      filter(         nugent_score_category == 'high',         taxon_annotation == 'hv-associated'     ) |>      arrange(desc(TSS)) |>      pull(sample) samples_order <- c(first_set, second_set) p1 <- data |>      mutate(         sample = factor(sample, levels = samples_order),         nugent_score_category = factor(             nugent_score_category, levels = c('low', 'high'),             labels = c('Low Nugent score', 'High Nugent score')         ),         taxon_annotation = case_when(             taxon_annotation == \"hv-associated\" ~ \"Health-associated\",             taxon_annotation == \"bv-associated\" ~ \"BV-associated\",             TRUE ~ taxon_annotation         ),         taxon_annotation = factor(             taxon_annotation, levels = c('Health-associated', 'BV-associated', 'Unannotated')[3:1]         )     ) |>     ggplot(aes(sample, TSS )) +     geom_col(aes(fill = taxon_annotation)) +     scale_fill_manual(values = c('gray60', 'firebrick2', 'dodgerblue2')) +     labs(         x = \"Samples\",         y = \"Relative abundance values (TSS)\"     ) +     facet_wrap(~nugent_score_category, ncol = 2, scales = \"free_x\") +     theme_bw() +     theme(         axis.text.x = element_blank(),         axis.ticks.x = element_blank(),         panel.grid = element_blank()     ) p1 p2 <- data |>      mutate(         sample = factor(sample, levels = samples_order),         nugent_score_category = factor(             nugent_score_category, levels = c('low', 'high'),             labels = c('Low Nugent score', 'High Nugent score')         ),         taxon_annotation = case_when(             taxon_annotation == \"hv-associated\" ~ \"Health-associated\",             taxon_annotation == \"bv-associated\" ~ \"BV-associated\",             TRUE ~ taxon_annotation         ),         taxon_annotation = factor(             taxon_annotation, levels = c('Health-associated', 'BV-associated', 'Unannotated')[3:1]         )     ) |>     ggplot(aes(sample, CLR )) +     geom_col(aes(fill = taxon_annotation)) +     scale_fill_manual(values = c('gray60', 'firebrick2', 'dodgerblue2')) +     labs(         x = \"Samples\",         y = \"CLR transformed values\"     ) +     facet_wrap(~nugent_score_category, ncol = 2, scales = \"free_x\") +     theme_bw() +     theme(         axis.text.x = element_blank(),         axis.ticks.x = element_blank(),         panel.grid = element_blank()     ) p2"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Ravel_2011_16S_BV.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Ravel_2011_16S_BV - Bacterial vaginosis","text":"","code":"sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] tidySummarizedExperiment_1.6.1             ##  [2] gridExtra_2.3                              ##  [3] ggplot2_3.3.6                              ##  [4] purrr_0.3.4                                ##  [5] benchdamic_1.3.1                           ##  [6] dplyr_1.0.9                                ##  [7] phyloseq_1.40.0                            ##  [8] mia_1.4.0                                  ##  [9] MultiAssayExperiment_1.22.0                ## [10] MicrobiomeBenchmarkData_0.99.0             ## [11] TreeSummarizedExperiment_2.4.0             ## [12] Biostrings_2.64.0                          ## [13] XVector_0.36.0                             ## [14] SingleCellExperiment_1.18.0                ## [15] SummarizedExperiment_1.26.1                ## [16] Biobase_2.56.0                             ## [17] GenomicRanges_1.48.0                       ## [18] GenomeInfoDb_1.32.3                        ## [19] IRanges_2.30.0                             ## [20] S4Vectors_0.34.0                           ## [21] BiocGenerics_0.42.0                        ## [22] MatrixGenerics_1.8.1                       ## [23] matrixStats_0.62.0                         ## [24] MicrobiomeBenchmarkDataAnalyses_0.0.0.9000 ##  ## loaded via a namespace (and not attached): ##   [1] softImpute_1.4-1            pbapply_1.5-0               ##   [3] lattice_0.20-45             vctrs_0.4.1                 ##   [5] expm_0.999-6                mgcv_1.8-40                 ##   [7] beanplot_1.3.1              blob_1.2.3                  ##   [9] survival_3.4-0              nloptr_2.0.3                ##  [11] spatstat.data_2.2-0         later_1.3.0                 ##  [13] DBI_1.1.3                   rappdirs_0.3.3              ##  [15] uwot_0.1.11                 jpeg_0.1-9                  ##  [17] zlibbioc_1.42.0             MatrixModels_0.5-0          ##  [19] rgeos_0.5-9                 htmlwidgets_1.5.4           ##  [21] mvtnorm_1.1-3               future_1.27.0               ##  [23] leiden_0.4.2                ANCOMBC_1.6.2               ##  [25] parallel_4.2.1              scater_1.24.0               ##  [27] irlba_2.3.5                 illuminaio_0.38.0           ##  [29] Rcpp_1.0.9                  readr_2.1.2                 ##  [31] KernSmooth_2.23-20          promises_1.2.0.1            ##  [33] DelayedArray_0.22.0         methylumi_2.42.0            ##  [35] limma_3.52.2                vegan_2.6-2                 ##  [37] Hmisc_4.7-1                 fs_1.5.2                    ##  [39] textshaping_0.3.6           digest_0.6.29               ##  [41] png_0.1-7                   nor1mix_1.3-0               ##  [43] sctransform_0.3.3           cowplot_1.1.1               ##  [45] nleqslv_3.3.3               glmnet_4.1-4                ##  [47] pkgconfig_2.0.3             spatstat.random_2.2-0       ##  [49] DelayedMatrixStats_1.18.0   ggbeeswarm_0.6.0            ##  [51] iterators_1.0.14            reticulate_1.25             ##  [53] ffpe_1.40.0                 beeswarm_0.4.0              ##  [55] modeltools_0.2-23           xfun_0.32                   ##  [57] bslib_0.4.0                 zoo_1.8-10                  ##  [59] tidyselect_1.1.2            reshape2_1.4.4              ##  [61] ica_1.0-3                   viridisLite_0.4.0           ##  [63] rtracklayer_1.56.1          rlang_1.0.4                 ##  [65] jquerylib_0.1.4             glue_1.6.2                  ##  [67] RColorBrewer_1.1-3          RcppZiggurat_0.1.6          ##  [69] registry_0.5-1              stringr_1.4.0               ##  [71] DESeq2_1.36.0               labeling_0.4.2              ##  [73] SparseM_1.81                httpuv_1.6.5                ##  [75] biomformat_1.24.0           class_7.3-20                ##  [77] preprocessCore_1.58.0       BiocNeighbors_1.14.0        ##  [79] TH.data_1.1-1               Wrench_1.14.0               ##  [81] annotate_1.74.0             jsonlite_1.8.0              ##  [83] bit_4.0.4                   mime_0.12                   ##  [85] systemfonts_1.0.4           gplots_3.1.3                ##  [87] Rsamtools_2.12.0            Exact_3.1                   ##  [89] zCompositions_1.4.0-1       stringi_1.7.8               ##  [91] ROI_1.0-0                   spatstat.sparse_2.1-1       ##  [93] gsl_2.1-7.1                 rbibutils_2.2.9             ##  [95] scattermore_0.8             Rdpack_2.4                  ##  [97] yulab.utils_0.0.5           quadprog_1.5-8              ##  [99] bitops_1.0-7                cli_3.3.0                   ## [101] rhdf5filters_1.8.0          ALDEx2_1.28.1               ## [103] RSQLite_2.2.15              tidyr_1.2.0                 ## [105] libcoin_1.0-9               data.table_1.14.2           ## [107] bumphunter_1.38.0           energy_1.7-10               ## [109] rstudioapi_0.13             microbiome_1.18.0           ## [111] GenomicAlignments_1.32.1    sfsmisc_1.1-13              ## [113] nlme_3.1-159                locfit_1.5-9.6              ## [115] listenv_0.8.0               DECIPHER_2.24.0             ## [117] miniUI_0.1.1.1              NADA_1.6-1.1                ## [119] dbplyr_2.2.1                readxl_1.4.0                ## [121] TTR_0.24.3                  lifecycle_1.0.1             ## [123] cellranger_1.1.0            munsell_0.5.0               ## [125] caTools_1.18.2              codetools_0.2-18            ## [127] vipor_0.4.5                 lmtest_0.9-40               ## [129] htmlTable_2.4.1             xtable_1.8-4                ## [131] ROCR_1.0-11                 BiocManager_1.30.18         ## [133] abind_1.4-5                 farver_2.1.1                ## [135] parallelly_1.32.1           RANN_2.6.1                  ## [137] askpass_1.1                 SeuratObject_4.1.0          ## [139] BiocIO_1.6.0                GEOquery_2.64.2             ## [141] RcppAnnoy_0.0.19            goftest_1.2-3               ## [143] patchwork_1.1.1             tibble_3.1.8                ## [145] ggdendro_0.1.23             cluster_2.1.3               ## [147] future.apply_1.9.0          Seurat_4.1.1                ## [149] Matrix_1.4-1                tidytree_0.4.0              ## [151] ellipsis_0.3.2              prettyunits_1.1.1           ## [153] metagenomeSeq_1.38.0        ggridges_0.5.3              ## [155] mclust_5.4.10               igraph_1.3.4                ## [157] multtest_2.52.0             minfi_1.42.0                ## [159] slam_0.1-50                 spatstat.utils_2.3-1        ## [161] htmltools_0.5.3             BiocFileCache_2.4.0         ## [163] yaml_2.3.5                  GenomicFeatures_1.48.3      ## [165] utf8_1.2.2                  plotly_4.10.0               ## [167] XML_3.99-0.10               pkgdown_2.0.6               ## [169] e1071_1.7-11                foreign_0.8-82              ## [171] withr_2.5.0                 scuttle_1.6.2               ## [173] fitdistrplus_1.1-8          BiocParallel_1.30.3         ## [175] bit64_4.0.5                 rngtools_1.5.2              ## [177] doRNG_1.8.2                 rootSolve_1.8.2.3           ## [179] trust_0.1-8                 affyio_1.66.0               ## [181] multcomp_1.4-20             foreach_1.5.2               ## [183] spatstat.core_2.4-4         progressr_0.10.1            ## [185] ragg_1.2.2                  rsvd_1.0.5                  ## [187] ScaledMatrix_1.4.0          memoise_2.0.1               ## [189] evaluate_0.16               VGAM_1.1-7                  ## [191] forcats_0.5.1               geneplotter_1.74.0          ## [193] tzdb_0.3.0                  permute_0.9-7               ## [195] lmom_2.9                    curl_4.3.2                  ## [197] fansi_1.0.3                 highr_0.9                   ## [199] xts_0.12.1                  ZINQ_1.0                    ## [201] tensor_1.5                  edgeR_3.38.4                ## [203] checkmate_2.1.0             cachem_1.0.6                ## [205] desc_1.4.1                  truncnorm_1.0-8             ## [207] interp_1.1-3                detectseparation_0.2        ## [209] deldir_1.0-6                corncob_0.2.0               ## [211] rjson_0.2.21                ggrepel_0.9.1               ## [213] lumi_2.48.0                 ade4_1.7-19                 ## [215] rprojroot_2.0.3             tools_4.2.1                 ## [217] sass_0.4.2                  sandwich_3.0-2              ## [219] magrittr_2.0.3              RCurl_1.98-1.8              ## [221] proxy_0.4-27                ape_5.6-2                   ## [223] xml2_1.3.3                  ROI.plugin.lpsolve_1.0-1    ## [225] httr_1.4.3                  assertthat_0.2.1            ## [227] rmarkdown_2.14              boot_1.3-28                 ## [229] globals_0.16.0              R6_2.5.1                    ## [231] Rhdf5lib_1.18.2             nnet_7.3-17                 ## [233] DirichletMultinomial_1.38.0 progress_1.2.2              ## [235] genefilter_1.78.0           KEGGREST_1.36.3             ## [237] treeio_1.20.1               gtools_3.9.3                ## [239] shape_1.4.6                 coin_1.4-2                  ## [241] beachmat_2.12.0             HDF5Array_1.24.2            ## [243] BiocSingular_1.12.0         rhdf5_2.40.0                ## [245] splines_4.2.1               colorspace_2.0-3            ## [247] generics_0.1.3              base64enc_0.1-3             ## [249] pillar_1.8.0                affy_1.74.0                 ## [251] sp_1.5-0                    GenomeInfoDbData_1.2.8      ## [253] plyr_1.8.7                  gtable_0.3.0                ## [255] restfulr_0.0.15             lpSolveAPI_5.5.2.0-17.8     ## [257] latticeExtra_0.6-30         knitr_1.39                  ## [259] biomaRt_2.52.0              fastmap_1.1.0               ## [261] doParallel_1.0.17           quantreg_5.94               ## [263] AnnotationDbi_1.58.0        Rfast_2.0.6                 ## [265] backports_1.4.1             openssl_2.0.2               ## [267] scales_1.2.0                filelock_1.0.2              ## [269] base64_2.0                  decontam_1.16.0             ## [271] gld_2.6.5                   hms_1.1.1                   ## [273] scrime_1.3.5                Rtsne_0.16                  ## [275] shiny_1.7.2                 MGLM_0.2.1                  ## [277] polyclip_1.10-0             grid_4.2.1                  ## [279] numDeriv_2016.8-1.1         siggenes_1.70.0             ## [281] DescTools_0.99.45           lazyeval_0.2.2              ## [283] Formula_1.2-4               crayon_1.5.1                ## [285] MASS_7.3-58.1               MAST_1.22.0                 ## [287] sparseMatrixStats_1.8.0     viridis_0.6.2               ## [289] reshape_0.8.9               rpart_4.1.16                ## [291] compiler_4.2.1              spatstat.geom_2.4-0         ## [293] zinbwave_1.18.0"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Stammler_2016_16S_spikein.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Sammler_2016_16S_spikein - Spike-in bacteria","text":"","code":"tse <- getBenchmarkData('Stammler_2016_16S_spikein', dryrun = FALSE)[[1]]"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Stammler_2016_16S_spikein.html","id":"recalibrate-with-spike-in-salinibacter-ruber","dir":"Articles","previous_headings":"Data","what":"Recalibrate with spike-in Salinibacter ruber","title":"Sammler_2016_16S_spikein - Spike-in bacteria","text":"","code":"spk_bac <- c(     `S. ruber` = 'AF323500XXXX',      `R. radiobacter` = 'AB247615XXXX',     `A. acidiphilus` = 'AB076660XXXX' )  counts <- assay(tse, 'counts') s_ruber <- counts[spk_bac['S. ruber'], ]  size_factor <- s_ruber/mean(s_ruber) SCML_data <- counts  for(i in seq(ncol(SCML_data))){     SCML_data[,i] <- round(SCML_data[,i] / size_factor[i]) }  assay(tse, 'counts_recal') <- SCML_data"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Stammler_2016_16S_spikein.html","id":"tranform-with-tss-relative-abundance-and-clr","dir":"Articles","previous_headings":"Data","what":"Tranform with TSS (relative abundance) and CLR","title":"Sammler_2016_16S_spikein - Spike-in bacteria","text":"","code":"tss_fun <- function(x) (x + 1) / sum((x + 1)) clr_fun <- function(x) (x + 1) / exp(mean(log((x + 1))))  ## TSS (relative abundance) assay(tse, \"TSS\") <- apply(assay(tse, 'counts'), 2,  tss_fun)  ## CLR assay(tse, \"CLR\") <- apply(assay(tse, 'counts'), 2, clr_fun)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Stammler_2016_16S_spikein.html","id":"extract-data-of-sipike-in-bacteria","dir":"Articles","previous_headings":"","what":"Extract data of sipike-in bacteria","title":"Sammler_2016_16S_spikein - Spike-in bacteria","text":"","code":"spk_bac_tse <- tse[spk_bac,] rownames(spk_bac_tse) <- names(spk_bac) spk_bac_tse #> class: TreeSummarizedExperiment  #> dim: 3 17  #> metadata(0): #> assays(4): counts counts_recal TSS CLR #> rownames(3): S. ruber R. radiobacter A. acidiphilus #> rowData names(1): taxonomy #> colnames(17): MID26 MID27 ... MID42 MID43 #> colData names(12): dataset subject_id ... country description #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> rowLinks: NULL #> rowTree: NULL #> colLinks: NULL #> colTree: NULL"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Stammler_2016_16S_spikein.html","id":"get-tidy-data","dir":"Articles","previous_headings":"","what":"Get tidy data","title":"Sammler_2016_16S_spikein - Spike-in bacteria","text":"","code":"## sample metadata # col_data <- tse %>%  #     colData() %>%  #     as.data.frame() %>%  #     rownames_to_column(var = \"sample\") %>%  #     as_tibble() %>%  #     select(sample, subject_id, study_condition)  ## data for relative abundance output <- vector(\"list\", length(assays(spk_bac_tse))) for (i in seq_along(output)) {     data_name <- names(assays(spk_bac_tse))[i]     names(output)[i] <- data_name     output[[i]] <- tidy.RangedSummarizedExperiment(         spk_bac_tse, assay = data_name     ) %>%          magrittr::set_colnames(c('taxon', 'sample', data_name)) } data <- purrr::reduce(output, left_join)     # left_join(col_data) %>%      # relocate(subject_id, study_condition, .after = sample)  DT::datatable(data, filter = 'top')"},{"path":[]},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Stammler_2016_16S_spikein.html","id":"define-formula-for-calculating-coefficient-of-variation","dir":"Articles","previous_headings":"Calculate coefficient of variation","what":"Define formula for calculating coefficient of variation","title":"Sammler_2016_16S_spikein - Spike-in bacteria","text":"","code":"get_cv <- function(x) {     cv <- function(x, n) { sd(x[n]) / mean(x[n]) * 100 }      boot::boot(x, cv, R = 1000) |>         broom::tidy() |>         dplyr::rename(cv = statistic) } cv_res <- data %>%      group_by(taxon) %>%      summarize(across(.cols = counts:last_col(), .fns = get_cv)) %>%      pivot_longer(         cols = 2:last_col(), names_to = 'norm', values_to = 'cv_res'      ) %>%      unnest(cols = 'cv_res')     DT::datatable(cv_res, filter = 'top')"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Stammler_2016_16S_spikein.html","id":"compare-coefficient-of-variation","dir":"Articles","previous_headings":"","what":"Compare coefficient of variation","title":"Sammler_2016_16S_spikein - Spike-in bacteria","text":"","code":"cv_res %>%      filter(norm != 'counts') %>%     mutate(norm = ifelse(norm == 'TSS', 'Relative abundance', norm)) %>%     mutate(norm = ifelse(norm == 'counts_recal', 'Recalibrated counts', norm)) %>%     mutate(         norm = factor(norm, levels = c(             'counts', 'Recalibrated counts', 'Relative abundance',  'CLR'             )         )     ) %>%     mutate(taxon = forcats::fct_relevel(taxon, 'S. ruber')) %>%      ggplot(aes(reorder(norm, cv), cv)) +     geom_point(aes(color = norm), size = 2) +      geom_errorbar(         aes(ymin = cv - std.error, ymax = cv + std.error, color = norm),         width = 0.4, size = 0.5     ) +     scale_color_brewer(type = 'qual', palette = 'Set2') +     facet_wrap(~taxon) +      labs(         y = 'Coefficient of variation across all samples',         x = 'Data transformation'     ) +      theme_bw() +      theme(         axis.text.x = element_text(angle = 45, hjust = 1),         panel.grid.major.x = element_blank(),         strip.text = element_text(face = 'italic'),         # legend.title = element_blank()         legend.position = 'none'     )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/articles/Stammler_2016_16S_spikein.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Sammler_2016_16S_spikein - Spike-in bacteria","text":"","code":"sessionInfo() #> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplot2_3.3.6                              #>  [2] biobroom_1.28.0                            #>  [3] broom_1.0.0                                #>  [4] tidyr_1.2.0                                #>  [5] tibble_3.1.8                               #>  [6] dplyr_1.0.9                                #>  [7] MicrobiomeBenchmarkData_0.99.0             #>  [8] TreeSummarizedExperiment_2.4.0             #>  [9] Biostrings_2.64.0                          #> [10] XVector_0.36.0                             #> [11] SingleCellExperiment_1.18.0                #> [12] SummarizedExperiment_1.26.1                #> [13] Biobase_2.56.0                             #> [14] GenomicRanges_1.48.0                       #> [15] GenomeInfoDb_1.32.3                        #> [16] IRanges_2.30.0                             #> [17] S4Vectors_0.34.0                           #> [18] BiocGenerics_0.42.0                        #> [19] MatrixGenerics_1.8.1                       #> [20] matrixStats_0.62.0                         #> [21] MicrobiomeBenchmarkDataAnalyses_0.0.0.9000 #>  #> loaded via a namespace (and not attached): #>  [1] TH.data_1.1-1          colorspace_2.0-3       ellipsis_0.3.2         #>  [4] modeltools_0.2-23      rprojroot_2.0.3        fs_1.5.2               #>  [7] rstudioapi_0.13        farver_2.1.1           DT_0.24                #> [10] bit64_4.0.5            fansi_1.0.3            mvtnorm_1.1-3          #> [13] coin_1.4-2             codetools_0.2-18       splines_4.2.1          #> [16] cachem_1.0.6           libcoin_1.0-9          knitr_1.39             #> [19] jsonlite_1.8.0         dbplyr_2.2.1           compiler_4.2.1         #> [22] httr_1.4.3             backports_1.4.1        assertthat_0.2.1       #> [25] Matrix_1.4-1           fastmap_1.1.0          lazyeval_0.2.2         #> [28] cli_3.3.0              htmltools_0.5.3        tools_4.2.1            #> [31] gtable_0.3.0           glue_1.6.2             GenomeInfoDbData_1.2.8 #> [34] rappdirs_0.3.3         Rcpp_1.0.9             jquerylib_0.1.4        #> [37] pkgdown_2.0.6          vctrs_0.4.1            ape_5.6-2              #> [40] nlme_3.1-159           crosstalk_1.2.0        xfun_0.32              #> [43] stringr_1.4.0          lifecycle_1.0.1        zlibbioc_1.42.0        #> [46] MASS_7.3-58.1          zoo_1.8-10             scales_1.2.0           #> [49] ragg_1.2.2             parallel_4.2.1         sandwich_3.0-2         #> [52] RColorBrewer_1.1-3     yaml_2.3.5             curl_4.3.2             #> [55] memoise_2.0.1          yulab.utils_0.0.5      sass_0.4.2             #> [58] stringi_1.7.8          RSQLite_2.2.15         highr_0.9              #> [61] desc_1.4.1             tidytree_0.4.0         filelock_1.0.2         #> [64] boot_1.3-28            BiocParallel_1.30.3    rlang_1.0.4            #> [67] pkgconfig_2.0.3        systemfonts_1.0.4      bitops_1.0-7           #> [70] evaluate_0.16          lattice_0.20-45        purrr_0.3.4            #> [73] treeio_1.20.1          htmlwidgets_1.5.4      labeling_0.4.2         #> [76] bit_4.0.4              tidyselect_1.1.2       magrittr_2.0.3         #> [79] R6_2.5.1               generics_0.1.3         multcomp_1.4-20        #> [82] DelayedArray_0.22.0    DBI_1.1.3              pillar_1.8.0           #> [85] withr_2.5.0            survival_3.4-0         RCurl_1.98-1.8         #> [88] crayon_1.5.1           utf8_1.2.2             BiocFileCache_2.4.0    #> [91] rmarkdown_2.14         grid_4.2.1             blob_1.2.3             #> [94] forcats_0.5.1          digest_0.6.29          textshaping_0.3.6      #> [97] munsell_0.5.0          bslib_0.4.0"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Samuel David Gamboa-Tuz. Author, maintainer.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gamboa-Tuz S (2022). MicrobiomeBenchmarkDataAnalyses: Benchmarking analyses MicrobiomeBenchmarkData package. R package version 0.0.0.9000, https://github.com/waldronlab/MicrobiomeBenchmarkDataAnalyses.","code":"@Manual{,   title = {MicrobiomeBenchmarkDataAnalyses: Benchmarking analyses with the MicrobiomeBenchmarkData package},   author = {Samuel David Gamboa-Tuz},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/waldronlab/MicrobiomeBenchmarkDataAnalyses}, }"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/index.html","id":"analyses-using-microbiomebenchmarkdata","dir":"","previous_headings":"","what":"Benchmarking analyses with the MicrobiomeBenchmarkData package","title":"Benchmarking analyses with the MicrobiomeBenchmarkData package","text":"package contains analyses performed datasets included consideration included MicrobiomeBenchmarkData package, provides benchmark datasets differential abundance methods microbiome research. Package website: https://waldronlab.io/MicrobiomeBenchmarkDataAnalyses Installation","code":"## Package installation if (!\"BiocManager\" %in% install.packages()[,\"Package\"])   install.packages(\"BiocManager\") BiocManager::install(\"waldronlab/MicrobiomeBenchmarkDataAnalyses\")"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/index.html","id":"links","dir":"","previous_headings":"","what":"Links","title":"Benchmarking analyses with the MicrobiomeBenchmarkData package","text":"Data Zenodo: https://zenodo.org/record/6911027 R package Bioconductor: <<>> R package source code: https://github.com/waldronlab/MicrobiomeBenchmarkData R package issues: https://github.com/waldronlab/MicrobiomeBenchmarkData/issues Scripts preparing datasets: https://github.com/waldronlab/MicrobiomeBenchmarkDataPrep Code reproducibility analyses: https://waldronlab.io/MicrobiomeBenchmarkDataAnalyses","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_ZINQ.html","id":null,"dir":"Reference","previous_headings":"","what":"ZINQ for benchdamic — DA_ZINQ","title":"ZINQ for benchdamic — DA_ZINQ","text":"zinq adapts zinq method integration benchdamic package.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_ZINQ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ZINQ for benchdamic — DA_ZINQ","text":"","code":"DA_ZINQ(   object,   pseudo_count = FALSE,   conditions_col,   conditions,   norm = \"none\",   pval_method,   y_CorD,   verbose = FALSE )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_ZINQ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ZINQ for benchdamic — DA_ZINQ","text":"object (Tree)SummarizedExperiment phyloseq object. pseudo_count Whether include pseudo_count. Default = FALSE. conditions_col name grouping column, located colData (SummarizedExperiment) sample_data (phyloseq). conditions character vector indicating conditions. Example: c(condB = 'control', condA = 'treatment') norm character string indicating normalization method used prior analysis. Default 'none'. pval_method character string indicating type pvalue use. Options: Cauchy MinP. Default: Cauchy. y_CorD Indicate data counts 'D' continuous 'C'. verbose Whether include messages . Default FALSE.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_ZINQ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ZINQ for benchdamic — DA_ZINQ","text":"list format used benhcdamic pipeline.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_ZINQ.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ZINQ for benchdamic — DA_ZINQ","text":"Ling, W., Zhao, N., Plantinga, .M. et al. Powerful robust non-parametric association testing microbiome data via zero-inflated quantile approach (ZINQ). Microbiome 9, 181 (2021). https://doi.org/10.1186/s40168-021-01129-3","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_ancombc.html","id":null,"dir":"Reference","previous_headings":"","what":"DA_ancombc — DA_ancombc","title":"DA_ancombc — DA_ancombc","text":"DA_ancombc adaptation ancombc function integration benchdamic framework.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_ancombc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DA_ancombc — DA_ancombc","text":"","code":"DA_ancombc(   object,   pseudo_count = FALSE,   norm = \"none\",   conditions,   verbose = TRUE,   group,   formula,   ... )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_ancombc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DA_ancombc — DA_ancombc","text":"object phyloseq object. pseudo_count Logical. Whether inlucde pseudocount 1 . Default FALSE. norm Character string indicating normalization use. Options: 'none' 'TSS'. Default 'none'. conditions named character vector length 2 indicating names conditions compared. names must 'condB' reference 'condA' target, order. example: c(condB = 'control', condA = 'treatment'). verbose Logical. TRUE messages step printed screen. Default FALSE. group Name column conditions/group information. argument ancombc. Check original function information. formula Name column conditions/group information. argument ancombc. Check original function information. ... Parameters passed ancombc function.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_ancombc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DA_ancombc — DA_ancombc","text":"list results analysis ready integrated benchadmic framework.","code":""},{"path":[]},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_lefse.html","id":null,"dir":"Reference","previous_headings":"","what":"Lefser method — DA_lefse","title":"Lefser method — DA_lefse","text":"DA_lefser modified version lefser package, includes pvalues Kruskal test.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_lefse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lefser method — DA_lefse","text":"","code":"DA_lefse(   object,   pseudo_count = FALSE,   conditions,   norm = \"none\",   verbose = FALSE,   groupCol,   ... )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_lefse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lefser method — DA_lefse","text":"object phyloseq (Tree)SummarizedExperiment object. pseudo_count Add pseudocount 1. Default FALSE. conditions named character vector length two. Names must \"condB\" \"condA\" order. \"condB\" must indicate control/reference/denominator \"condA\" must indicate treatment/target/numerator. Example: c(condB = 'control', condA = 'treatment') norm Normalization method. Options: none, CLR, TSS. verbose TRUE, messages displayed screen. Default FALSE. groupCol Name column colData conditions. ... Parameters passed lefser.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_lefse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lefser method — DA_lefse","text":"object ready included benchdamic framework.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_wilcox.html","id":null,"dir":"Reference","previous_headings":"","what":"Wilcox test for differential abundance — DA_wilcox","title":"Wilcox test for differential abundance — DA_wilcox","text":"DA_wilcox performs Wilcoxon test phyloseq object.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_wilcox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wilcox test for differential abundance — DA_wilcox","text":"","code":"DA_wilcox(   object,   pseudo_count = FALSE,   norm = \"none\",   conditions_col,   conditions,   verbose = FALSE )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_wilcox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wilcox test for differential abundance — DA_wilcox","text":"object phyloseq object. pseudo_count Whether include pseudocount . Default FASLE. norm String character. Choose three normalization methods: 'none', 'CLR', 'TSS'. conditions_col String character. name column sample data conditions. conditions named character vector. names must \"condB\" \"condA\". condB indicates reference/numerator/control condA indicates target/denominator/treatment. example: c(condB = 'control', condA = 'treatment') verbose Print messages , Default FALSE.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/DA_wilcox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wilcox test for differential abundance — DA_wilcox","text":"list outputs compatible benchdamic framework.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/MicrobiomeBenchmarkDataAnalyses.html","id":null,"dir":"Reference","previous_headings":"","what":"MicrobiomeBenchmarkDataAnalyses — MicrobiomeBenchmarkDataAnalyses","title":"MicrobiomeBenchmarkDataAnalyses — MicrobiomeBenchmarkDataAnalyses","text":"MicrobiomeBenchmarkDataAnalyses package DA analyses performed MicrobiomeBenchmarkData package.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/editMiaTaxaNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit the taxa names by mia — editMiaTaxaNames","title":"Edit the taxa names by mia — editMiaTaxaNames","text":"editMiaTaxaNames corrects taxonomic names agglomerateByRank function mia package. reason,names coming bad datasets. workaround.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/editMiaTaxaNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit the taxa names by mia — editMiaTaxaNames","text":"","code":"editMiaTaxaNames(x)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/editMiaTaxaNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit the taxa names by mia — editMiaTaxaNames","text":"x TreeSummarizedExperiment agglomerated agglomerateByRank function mia package.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/editMiaTaxaNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit the taxa names by mia — editMiaTaxaNames","text":"character vector new names","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/filterTaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter taxa based on abundance values per sample — filterTaxa","title":"Filter taxa based on abundance values per sample — filterTaxa","text":"filterTaxa filters number taxa per sample based minimum value abundance. functions works phyloseq TreeSummarizedExperiment objects.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/filterTaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter taxa based on abundance values per sample — filterTaxa","text":"","code":"filterTaxa(x, min_ab = 1, min_per = 0.2)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/filterTaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter taxa based on abundance values per sample — filterTaxa","text":"x phyloseq TreeSummarizedExperiment object otu_table/assay sample_data/colData min_ab minimum value abundance taxon considered present sample. Default 1. default value 1 good counts. Relative abundance data transformations might require another threshold value. min_per minimum percentage samples taxon must present order kept data. Default 0.2. Taxon presence dtermined min_ab argument (see ).","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/filterTaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter taxa based on abundance values per sample — filterTaxa","text":"filtered phyloseq/TreeSummarized object","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/get_direction_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get direction columns — get_direction_cols","title":"Get direction columns — get_direction_cols","text":"get_direction_cols gets names columns effect sizes DA method. output suitable enrichment analyses benchdamic.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/get_direction_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get direction columns — get_direction_cols","text":"","code":"get_direction_cols(x, conditions_col, conditions)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/get_direction_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get direction columns — get_direction_cols","text":"x Output run_DA. conditions_col Character string indicating name column containing conditions samples sample_metadata/colData. conditions named character vector. names must \"condB\" \"condA\". condB indicates reference/numerator/control condA indicates target/denominator/treatment. example: c(condB = 'control', condA = 'treatment')","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/get_direction_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get direction columns — get_direction_cols","text":"named vector ready used createEnrichment createPositives functions.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/get_meth_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods classification — get_meth_class","title":"Methods classification — get_meth_class","text":"method_classification returns tibble methods classification.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/get_meth_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods classification — get_meth_class","text":"","code":"get_meth_class()"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/get_meth_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods classification — get_meth_class","text":"tibble.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/lefser2.html","id":null,"dir":"Reference","previous_headings":"","what":"R implementation of the LEfSe method 2 — lefser2","title":"R implementation of the LEfSe method 2 — lefser2","text":"lefser2 adaptation lefser function. adaptation allows inclusion raw p-values KW test output.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/lefser2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R implementation of the LEfSe method 2 — lefser2","text":"","code":"lefser2(   expr,   kruskal.threshold = 0.05,   wilcox.threshold = 0.05,   lda.threshold = 2,   groupCol = \"GROUP\",   blockCol = NULL,   assay = 1L,   trim.names = FALSE,   log = FALSE )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/lefser2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R implementation of the LEfSe method 2 — lefser2","text":"expr SummarizedExperiment expression data. kruskal.threshold numeric(1) p-value Kruskal-Wallis Rank Sum Test (default 0.05). wilcox.threshold numeric(1) p-value Wilcoxon Rank-Sum Test 'blockCol' present (default 0.05). lda.threshold numeric(1) effect size threshold (default 2.0). groupCol character(1) Column name colData(expr) indicating groups, usually factor two levels (e.g., c(\"cases\", \"controls\"); default \"GROUP\"). blockCol character(1) Optional column name colData(expr) indicating blocks, usually factor two levels (e.g., c(\"adult\", \"senior\"); default NULL). assay -th assay matrix SummarizedExperiment ('expr'; default 1). trim.names TRUE extracts specific taxonomic rank organism. log TRUE, matrix exponentiated (exp). Default FALSE.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/lefser2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R implementation of the LEfSe method 2 — lefser2","text":"function returns data frame three columns, names microorganisms, LDA scores, kruskal wallis p-values.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/log2_fold_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate log2 fold change — log2_fold_change","title":"Calculate log2 fold change — log2_fold_change","text":"log2_fold_change calculates log2 fold change matrix features rows samples columns.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/log2_fold_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate log2 fold change — log2_fold_change","text":"","code":"log2_fold_change(   mat,   condition_vector,   condB = NULL,   log = FALSE,   pseudocount = 0 )"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/log2_fold_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate log2 fold change — log2_fold_change","text":"mat matrix. Features rows samples columns. condition_vector character vector factor names conditions. conditions must correspond samples, .e. exact order. Two two conditions (levels) needed. condB Condition used reference. E.g. control condition. log log TRUE, assumed matrix already log transformed. pseudocount Numeric value indicating pseudocount added.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/log2_fold_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate log2 fold change — log2_fold_change","text":"named vector log2 fold changes per feature.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/norm_clr.html","id":null,"dir":"Reference","previous_headings":"","what":"CLR normalization — norm_clr","title":"CLR normalization — norm_clr","text":"apply_clr applies centered-log ratio transformation matrix. Features (e.g. taxa, OTUs) must rows samples columns.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/norm_clr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CLR normalization — norm_clr","text":"","code":"norm_clr(mat, pseudocount = 0, log = FALSE)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/norm_clr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CLR normalization — norm_clr","text":"mat count matrix. pseudocount pseudocount add. Default = 1. log TRUE, CLR logged. Default = FALSE.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/norm_clr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CLR normalization — norm_clr","text":"matrix CLR normalization","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/norm_tss.html","id":null,"dir":"Reference","previous_headings":"","what":"TSS normalization — norm_tss","title":"TSS normalization — norm_tss","text":"norm_TSS Applies TSS normalization matrix count data.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/norm_tss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TSS normalization — norm_tss","text":"","code":"norm_tss(mat, total_sum = 1e+06)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/norm_tss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TSS normalization — norm_tss","text":"mat numeric matrix counts. total_sum tolal sum scaling, e.g. 100 1e.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/norm_tss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TSS normalization — norm_tss","text":"TSS-normalized matrix,","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/plot_enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot enrichment object — plot_enrichment","title":"Plot enrichment object — plot_enrichment","text":"plot_enrichment make plot benchdamic enrichment object.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/plot_enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot enrichment object — plot_enrichment","text":"","code":"plot_enrichment(enrichment, enrichment_col, levels_to_plot = NULL, conditions)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/plot_enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot enrichment object — plot_enrichment","text":"enrichment Enrichment output benchdamic. enrichment_col Column enrichment annotations. levels_to_plot Levels used plotting. Default . conditions Named vector. names must condB condA. Example: c(condB = 'control', condA = 'treatment')","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/plot_enrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot enrichment object — plot_enrichment","text":"ggplot object","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/plot_positives.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot positives — plot_positives","title":"Plot positives — plot_positives","text":"plot_positives version plotPositives","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/plot_positives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot positives — plot_positives","text":"","code":"plot_positives(x)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/plot_positives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot positives — plot_positives","text":"x dataframe. Positives additional columns.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/plot_positives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot positives — plot_positives","text":"List plots","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/quiet.html","id":null,"dir":"Reference","previous_headings":"","what":"Quiet — quiet","title":"Quiet — quiet","text":"quiet hides messages. taken stackOverflow (reference must added).","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/quiet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quiet — quiet","text":"","code":"quiet(x)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/quiet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quiet — quiet","text":"x Expression, command, etc.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/quiet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quiet — quiet","text":"Nothing. NULL.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/run_DA.html","id":null,"dir":"Reference","previous_headings":"","what":"Run differential abundance methods — run_DA","title":"Run differential abundance methods — run_DA","text":"run_DA runs set predefined differential abundance methods phyloseq object. function includes normalization, calculation matrix zinbweights, running DA methods.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/run_DA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run differential abundance methods — run_DA","text":"","code":"run_DA(object, conditions_col, conditions, verbose = FALSE)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/run_DA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run differential abundance methods — run_DA","text":"object phyloseq object. conditions_col character string indicating name column sample_metadata contains conditions compared. conditions named character vector. names must \"condB\" \"condA\". condB indicates reference/numerator/control condA indicates target/denominator/treatment. example: c(condB = 'control', condA = 'treatment') verbose argument passed runNormalizations runDA functions.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/run_DA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run differential abundance methods — run_DA","text":"list containing results DA methods. output compatible benchdamic framework.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/set_DA_methods_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Set list of DA methods — set_DA_methods_list","title":"Set list of DA methods — set_DA_methods_list","text":"set_DA_methods_list creates predefined list methods benchdamic framework. output function input runDA function.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/set_DA_methods_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set list of DA methods — set_DA_methods_list","text":"","code":"set_DA_methods_list(conditions_col, conditions)"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/set_DA_methods_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set list of DA methods — set_DA_methods_list","text":"conditions_col Character string indicating name column containing conditions samples sample_metadata/colData. conditions named character vector. names must \"condB\" \"condA\". condB indicates reference/numerator/control condA indicates target/denominator/treatment. example: c(condB = 'control', condA = 'treatment')","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/set_DA_methods_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set list of DA methods — set_DA_methods_list","text":"list DA methods benchdamic.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/set_norm_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Set list of normalization methods — set_norm_list","title":"Set list of normalization methods — set_norm_list","text":"set_norm_list wrapper setNormalizations function already predefined normalization methods. methods : CSSdefault, CSSmedian, TMM, poscounts, none.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/set_norm_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set list of normalization methods — set_norm_list","text":"","code":"set_norm_list()"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/set_norm_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set list of normalization methods — set_norm_list","text":"list normalization methods compatible benchdamic framework.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/set_norm_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set list of normalization methods — set_norm_list","text":"output used input runNormalizations function.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/taxize_classification_to_taxonomy_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxize classification to a taxonomy table — taxize_classification_to_taxonomy_table","title":"Taxize classification to a taxonomy table — taxize_classification_to_taxonomy_table","text":"taxize_classification_to_taxonomy_table converts output taxize::classification data frame.","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/taxize_classification_to_taxonomy_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxize classification to a taxonomy table — taxize_classification_to_taxonomy_table","text":"","code":"taxize_classification_to_taxonomy_table(tax, id_type = \"name\")"},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/taxize_classification_to_taxonomy_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxize classification to a taxonomy table — taxize_classification_to_taxonomy_table","text":"tax Output taxize::classification. id_type Either \"name\" \"id\".","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/taxize_classification_to_taxonomy_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxize classification to a taxonomy table — taxize_classification_to_taxonomy_table","text":"data frame","code":""},{"path":"http://waldronlab.io/MicrobiomeBenchmarkDataAnalyses/reference/taxize_classification_to_taxonomy_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Taxize classification to a taxonomy table — taxize_classification_to_taxonomy_table","text":"fuction taken misctoolsr package GitHub. Repo: sdgamboa/misctoolsr","code":""}]
